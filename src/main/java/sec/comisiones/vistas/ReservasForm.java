package sec.comisiones.vistas;


import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.vaadin.dialogs.ConfirmDialog;

import com.agpro.controles.Formateos;
import com.agpro.controles.ReportManagerAbstract;
import com.agpro.controles.Validaciones;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification.Type;

import sec.comisiones.dao.ChoferesDAO;
import sec.comisiones.dao.MarcasDAO;
import sec.comisiones.dao.ModelosDAO;
import sec.comisiones.dao.ReservasDAO;
import sec.comisiones.dao.VehiculosDAO;
import sec.comisiones.mapeos.Reservas;
import sec.comisiones.mapeos.Usuarios;





public class ReservasForm extends CustomComponent  {

	private static final long serialVersionUID = 5875984627547984953L;
	private VerticalLayout Form_mainLayout;
	private Panel contenedorPanel;
	private GridLayout Form_gridLayout0; 
	private GridLayout Form_gridLayout1;  

	private HorizontalLayout hl_botonesGral = new HorizontalLayout();

	
	private TextField idExp = new TextField("Nº Reserva");
	private DateField fecha = new DateField("Fecha");
	private DateField fechaSalida = new DateField("Fecha/Hora Salida");
	private DateField fechaRegreso = new DateField("Fecha/Hora Regreso");

	private CheckBox chkChofer = new CheckBox("Chofer");
	private CheckBox chkVehiculo = new CheckBox("Vehículo");
	
	private TextArea txtMotivo = new TextArea("Motivo");

	private ComboBox cmbChofer = new ComboBox("Chofer");
	private ComboBox cmbMarca = new ComboBox("Marca");
	private ComboBox cmbModelo = new ComboBox("Modelo");
	private ComboBox cmbDominio = new ComboBox("Dominio");


	NativeButton btnAsignarVehiculo = new NativeButton("Asignar Vehículo");
	NativeButton btnGrabar = new NativeButton("Grabar");
	NativeButton btnModificar = new NativeButton("Modificar");
	NativeButton btnCancelar = new NativeButton("Cancelar");

	NativeButton btnReporte1 = new NativeButton("Rpt Autorización");
	NativeButton btnReporte2 = new NativeButton("Rpt Vehículo");
	NativeButton btnReporte3 = new NativeButton("Rpt Anticipos");
	NativeButton btnCierre = new NativeButton("Salir");

	
	
    Formateos format = new Formateos();
	Validaciones valid = new Validaciones();
	Usuarios usrLog = new Usuarios();
	ReservasDAO u = new ReservasDAO();
	ChoferesDAO chof = new ChoferesDAO();
	VehiculosDAO vehi = new VehiculosDAO();
	MarcasDAO marca = new MarcasDAO();
	ModelosDAO modelo = new ModelosDAO();
	VehiculosDAO vehiculo = new VehiculosDAO();
	Reservas reservaObj = new Reservas();

	
	String idPlanificacion = "";
	String flag = "";
	int bandera=0;
	int idEstado=0;
	float duracion=0;
	
	SimpleDateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy HH:mm");
	DecimalFormat df = new DecimalFormat("##,##0.00");
	
	
	
	
	public ReservasForm() {
		ini(idPlanificacion,bandera);  
	}
	
	public ReservasForm(Usuarios usr) {
		usrLog= usr;
		ini(idPlanificacion,bandera);   
	}
	
	public ReservasForm(Usuarios usr, String idPlanif) {
		usrLog= usr;
		this.idPlanificacion=idPlanif;
		ini(idPlanificacion,bandera);  
	}

	public ReservasForm(Usuarios usr, String idPlanif, String flag) {
		usrLog= usr;
		this.idPlanificacion=idPlanif;
		this.flag=flag;
		ini(idPlanificacion,bandera);  
	}
	
	public ReservasForm(Usuarios usr, String idPlanif, String flag, NativeButton btnCierre1) {
		usrLog= usr;
		this.idPlanificacion=idPlanif;
		this.flag=flag;
		this.btnCierre=btnCierre1;
		ini(idPlanificacion,bandera);   
	}
	
	
	
	///////////////////////////////////////////////	
	///////////////////////////////////////////////	
	
	private void ini(String idPlanificacion, int bandera){
		buildMainLayout();
		setCompositionRoot(Form_mainLayout);
		
		btnAsignarVehiculo = new NativeButton("Asignar Vehículo");
		btnGrabar = new NativeButton("Grabar");
		btnModificar = new NativeButton("Modificar");
		btnCancelar = new NativeButton("Cancelar");
		btnReporte1 = new NativeButton("Rpt Autorización");
		btnReporte2 = new NativeButton("Rpt Vehículo");
		btnReporte3 = new NativeButton("Rpt Anticipos");
		 
		
	    idExp.setValue(String.valueOf(idPlanificacion));
	    
	      	
	    
	    setearFormatoComponentes();
	    
	    cargarComboChofer();
    	
	    cargarCombosVehiculo();
    	
	    setearValidaciones();
	    
	    deshabilitarCampos();

	    definirTamañoCampos();
		
		cargarGrillas();
		

		idExp.setEnabled(false);
		chkChofer.setValue(false);
		chkVehiculo.setValue(false);

		

		
		if (idExp.getValue()=="0") {
			if (flag=="carga"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnCancelar);
				btnModificar.setEnabled(false);
				btnCancelar.setEnabled(false);

			}
    	} 

		
		if (idExp.getValue()!="0") {
			cargaRegistro();
			
			deshabilitaDatosGeneral();
			deshabilitaVehiculo();
			deshabilitaChofer();
			
			
			
			if (flag=="carga"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnCancelar);
				btnGrabar.setEnabled(false);
				btnCancelar.setEnabled(false);				
				btnModificar.setEnabled(true);

		
			} else if (flag=="cnsTodas"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnReporte1,btnReporte2,btnReporte3);
				
				
			} else if (flag=="cnsGeneradas"){
				hl_botonesGral.removeAllComponents();
			//	hl_botonesGral.addComponents(btnReporte1,btnReporte2,btnReporte3);
				
			} 
			
			
			
	   }
		
		

		
		fechaSalida.addValueChangeListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				cambioFechas(); 
				  
			 }
		});
		
		
		fechaRegreso.addValueChangeListener(new ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				cambioFechas(); 
	
			 }
		});
		
		
		cmbMarca.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbModelo.setContainerDataSource(modelo.getAllModelosContainer((int)cmbMarca.getValue()));
					 cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
				 }
			 }
		});
	
		
		cmbModelo.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosActivosContainer((int)cmbMarca.getValue(), (int)cmbModelo.getValue()));
				 }
			 }
		});
		
		
		cmbDominio.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 // consulto si ya se encuentra para ese rango de fechas
					 String mensaje="";
					 
					 if(validaFechas()) {
					 	mensaje=vehi.FechaReserva1(Integer.parseInt(idExp.getValue()), (int) cmbDominio.getValue(), fechaSalida.getValue(),fechaRegreso.getValue());

					 	if(mensaje != ""){
					 		Notification.show(mensaje,Type.ERROR_MESSAGE);
					 	}
					 } else {
						 Notification.show("Debe seleccionar las fechas antes que el vehículo.",Type.ERROR_MESSAGE);
						 
					 }
				 }
			 }	
		});

			
		cmbChofer.addValueChangeListener(new ValueChangeListener() {
				 public void valueChange(ValueChangeEvent event) {
					 Object selectedItemId = event.getProperty().getValue();
					 if (selectedItemId != null) {
						 // consulto si ya se encuentra para ese rango de fechas 
						 String mensaje="";
						 
						 if(validaFechas()) {
							 mensaje=chof.FechaReserva1(Integer.parseInt(idExp.getValue()), (int) cmbChofer.getValue(), fechaSalida.getValue(),fechaRegreso.getValue());
	
							 if(mensaje != ""){
								 Notification.show(mensaje,Type.ERROR_MESSAGE);
							 }
					 } else {
						 Notification.show("Debe seleccionar las fechas antes que el chofer.",Type.ERROR_MESSAGE);
						 
					 }
					 }
				 }	
			});

		
		
		chkChofer.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if ((boolean) selectedItemId) {
					 habilitaChofer();
				 } else {
					 cargarComboChofer();
					 deshabilitaChofer();
					 
				 }
			 }	
		});
	
	
		chkVehiculo.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if ((boolean) selectedItemId) {
					 habilitaVehiculo();
				 } else {
					 cargarCombosVehiculo();
					 deshabilitaVehiculo();
					 
				 }
			 }	
		});
		
		
		
		btnModificar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				btnModificar.setEnabled(false);
				btnGrabar.setEnabled(true);
				btnCancelar.setEnabled(true);
				
				habilitaDatosGeneral();

			}
		});
	
		
		btnCancelar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				btnModificar.setEnabled(true);
				btnGrabar.setEnabled(false);
				btnCancelar.setEnabled(false);

				deshabilitaDatosGeneral();
				deshabilitaVehiculo();
				deshabilitaChofer();
				cargaRegistro();  
				
			}
		});
		
		
		btnGrabar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				if (!validarCampos()){
					Notification.show("Existen errores de validación","Revisar campos resaltados en rojo.",Type.ERROR_MESSAGE);
				} else if (!fechaSalida.getValue().before(fechaRegreso.getValue())){
					Notification.show("La Fecha/Hora de salida no puede ser posterior a la de regreso.",Notification.Type.ERROR_MESSAGE);
				} else if(!chkChofer.getValue() && !chkVehiculo.getValue()){
					Notification.show("Debe ingresar un chofer o vehículo.",Notification.Type.ERROR_MESSAGE);
				} else {
					ConfirmDialog.show(getUI(), "Confirmar", "¿Desea guardar la solicitud?","Sí", "No", new ConfirmDialog.Listener() {
						public void onClose(ConfirmDialog dialog) {
							if (dialog.isConfirmed()) {
								// C�digo S�
								try {
									if(idExp.getValue()=="0"){
										u.agrega(cargaObjeto(), usrLog.getId());
										//ini(String.valueOf(u.getUltimoId()),1);
										btnCierre.click();
									} else {
										u.modifica(cargaObjeto(),usrLog.getId());
										//ini(idExp.getValue(),1);
										btnCierre.click();
									}
								} catch (Exception e) {
									e.printStackTrace();
									Notification.show("Error al intentar grabar el registro",e.getMessage(),Notification.Type.ERROR_MESSAGE);
								}
							}
						}   
					});
				}
			}
		});
        
		
	
		
		btnReporte1.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				
				criterio=u.criterio(idExp.getValue());
				
				parametro.put("filtro",criterio);
				
				ReportManagerAbstract.VerReporte("ComisionesAutorizacion.jasper", parametro);
			}
		});

		
		btnReporte2.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				
				criterio=u.criterio(idExp.getValue());
				
				parametro.put("filtro",criterio);
				
				ReportManagerAbstract.VerReporte("ComisionesVehiculo.jasper", parametro);
			}
		});
    
		
		btnReporte3.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				
				criterio=u.criterio(idExp.getValue());
				
				parametro.put("filtro",criterio);
				
				ReportManagerAbstract.VerReporte("ComisionesAnticipoFondos.jasper", parametro);
			}
		});
		

		
		
		

	}
	

	
	
	private boolean validaFechas(){
		
		if(!fechaSalida.isEmpty() && !fechaRegreso.isEmpty()){
			return true;
		} else {
			return false;
		}
		
		
		
	}
	
	
	private void cambioFechas(){
		String mensaje="";
		
		try{
			if (!cmbDominio.isEmpty() && !fechaRegreso.isEmpty() && !fechaSalida.isEmpty()) {
				mensaje=vehi.FechaReserva1(Integer.parseInt(idExp.getValue()), (int) cmbDominio.getValue(), fechaSalida.getValue(),fechaRegreso.getValue());

			 	if(mensaje != ""){
			 		Notification.show(mensaje,Type.ERROR_MESSAGE);
			 	}
			}
			
			if(!cmbChofer.isEmpty() && !fechaRegreso.isEmpty() && !fechaSalida.isEmpty()){
				mensaje=chof.FechaReserva1(Integer.parseInt(idExp.getValue()), (int) cmbChofer.getValue(), fechaSalida.getValue(),fechaRegreso.getValue());
				
				 if(mensaje != ""){
					 Notification.show(mensaje,Type.ERROR_MESSAGE);
				 }
			}
		}
		catch(Exception e){
			Notification.show("",e.getMessage(),Type.ERROR_MESSAGE);
		} 
	}
	
	
	
	
	private Reservas cargaObjeto(){
		Reservas it = new Reservas();
		
		it.setId(Integer.parseInt(idExp.getValue()));
		it.setFecSalida(fechaSalida.getValue());
		it.setFecRegreso(fechaRegreso.getValue());
		it.setFechaAutorizacion(fecha.getValue());
		if(!cmbChofer.isEmpty()){it.setIdChofer((int) cmbChofer.getValue());} else {it.setIdChofer(0);}
		if(!cmbDominio.isEmpty()){it.setIdVehiculo((int) cmbDominio.getValue());} else {it.setIdVehiculo(0);}
		it.setObservaciones(txtMotivo.getValue());
		it.setChofer(chkChofer.getValue());
		it.setVehiculo(chkVehiculo.getValue());
		
		return it;
		
	}
	
	
	private void cargaRegistro(){
		try {
			reservaObj = u.DevuelveReserva(Integer.parseInt(idExp.getValue()));
			idExp.setValue(String.valueOf(reservaObj.getId()));
			fecha.setValue(reservaObj.getFechaAutorizacion());
			fechaSalida.setValue((reservaObj.getFechaHoraSalida()));
			fechaRegreso.setValue(reservaObj.getFechaHoraRegreso());
			txtMotivo.setValue(reservaObj.getObservaciones());
			
			cmbChofer.setValue(reservaObj.getIdChofer());
			cmbMarca.setValue(reservaObj.getDescMarca());
			
			chkChofer.setValue(reservaObj.isChofer());
			chkVehiculo.setValue(reservaObj.isVehiculo());
			
			int valorModelo=reservaObj.getDescModelo();
			int valorDominio=reservaObj.getDescDominio();
			
			if (cmbMarca.isEmpty()){
				cmbModelo.setContainerDataSource(modelo.getAllModelosContainer(0));
				cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
				} else {
					cmbModelo.setContainerDataSource(modelo.getAllModelosContainer((int)cmbMarca.getValue()));
					cmbModelo.setValue(valorModelo);
					if (cmbModelo.isEmpty()){
						cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
						}else{
							cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer((int)cmbMarca.getValue(), (int)cmbModelo.getValue()));
							cmbDominio.setValue(valorDominio);
						}
				}
	    	    		
		} catch (Exception e) {
			Notification.show("No se pudo obtener el expediente seleccionado, comuniquese con el administrador del sistema",e.getMessage(),Type.HUMANIZED_MESSAGE);
			e.printStackTrace();
		}
		
		
		
	}
	
	
	
	
	private void habilitaDatosGeneral(){
		fecha.setEnabled(true);
		fechaSalida.setEnabled(true);
		fechaRegreso.setEnabled(true);
		txtMotivo.setEnabled(true);
		chkChofer.setEnabled(true);
		chkVehiculo.setEnabled(true);
		if(chkChofer.getValue()){habilitaChofer();}
		if(chkVehiculo.getValue()){habilitaVehiculo();}

	}
	
	
	private void deshabilitaDatosGeneral(){
		fecha.setEnabled(false);
		fechaSalida.setEnabled(false);
		fechaRegreso.setEnabled(false);
		txtMotivo.setEnabled(false);
		chkChofer.setEnabled(false);
		chkVehiculo.setEnabled(false);

	}
	
	
	private void deshabilitaVehiculo(){
	    cmbMarca.setEnabled(false);
	    cmbModelo.setEnabled(false);
	    cmbDominio.setEnabled(false);
	
	}
	
	
	private void habilitaVehiculo(){
	    cmbMarca.setEnabled(true);
	    cmbModelo.setEnabled(true);
	    cmbDominio.setEnabled(true);

	}
	
	
	private void deshabilitaChofer(){
		cmbChofer.setEnabled(false);
	
	}
	
	
	private void habilitaChofer(){
		cmbChofer.setEnabled(true);

	}

	
	private void setearFormatoComponentes(){
	    btnGrabar.setStyleName("botonGrabarPlanificacion");
	    
	    fecha.setValue(new Date());
	    fecha.setDateFormat("dd/MM/yyyy");
	    fecha.setResolution(Resolution.DAY);
	    fecha.setLenient(true);
	    
    	
	    fechaSalida.setDateFormat("dd/MM/yyyy HH:mm");
	    fechaSalida.setResolution(Resolution.MINUTE);
	    fechaSalida.setLenient(true);
	    
	    
	    fechaRegreso.setDateFormat("dd/MM/yyyy HH:mm");
	    fechaRegreso.setResolution(Resolution.MINUTE);
	    fechaRegreso.setLenient(true);
	    
	    txtMotivo.setNullRepresentation("");
	    
	}

	
	private void cargarComboChofer(){
		cmbChofer.setContainerDataSource(chof.getAllChoferesContainer());
    		cmbChofer.setItemCaptionPropertyId("descChofer");
    	
	}
	
	
	private void cargarCombosVehiculo(){
	    	cmbMarca.setContainerDataSource(marca.getAllMarcasContainer());
	    	cmbMarca.setItemCaptionPropertyId("nombre");
	    	
	    	
	    	cmbModelo.setContainerDataSource(modelo.getAllModelosContainer(0));
	    	cmbModelo.setItemCaptionPropertyId("nombre");
	    	
	    	
	    	cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
	    	cmbDominio.setItemCaptionPropertyId("dominio");
	    	
	}
	
	
	private void setearValidaciones(){
		fecha.setRequired(true);
		fecha.setRequiredError("Campo Obligatorio");
		fecha.setValidationVisible(false);
    	
	    	fechaSalida.setRequired(true);
	    	fechaSalida.setRequiredError("Campo Obligatorio");
	    	fechaSalida.setValidationVisible(false);
	    	
	    	fechaRegreso.setRequired(true);
	    	fechaRegreso.setRequiredError("Campo Obligatorio");
	    	fechaRegreso.setValidationVisible(false);
	    	
	    	cmbChofer.setRequired(true);
	    	cmbChofer.setRequiredError("Campo Obligatorio");
	    	cmbChofer.setValidationVisible(false);
	    	
	    	cmbMarca.setRequired(true);
	    	cmbMarca.setRequiredError("Campo Obligatorio");
	    	cmbMarca.setValidationVisible(false);
	    	
	    	cmbModelo.setRequired(true);
	    	cmbModelo.setRequiredError("Campo Obligatorio");
	    	cmbModelo.setValidationVisible(false);
	    	
	    	cmbDominio.setRequired(true);
	    	cmbDominio.setRequiredError("Campo Obligatorio");
	    	cmbDominio.setValidationVisible(false);

	}

	
	private void deshabilitarCampos(){
		deshabilitaChofer();
		deshabilitaVehiculo();
		
		
	}

	
	private void definirTamañoCampos(){
	    	btnReporte1.setWidth(9.5f,Unit.EM);
	    	btnReporte2.setWidth(9.5f,Unit.EM);
	    	btnReporte3.setWidth(9.5f,Unit.EM);
	    	idExp.setWidth(9f, Unit.EM);	
		fecha.setWidth(9f, Unit.EM);
		fechaSalida.setWidth(12f, Unit.EM);
		fechaRegreso.setWidth(12f, Unit.EM);
		txtMotivo.setWidth("100.0%");
		txtMotivo.setHeight(2.5f, Unit.CM);
		
		cmbChofer.setWidth("100.0%");
	    	cmbMarca.setWidth("100.0%");
	    	cmbModelo.setWidth("100.0%");
	    	cmbDominio.setWidth("100.0%");
	
	}

	
	private void cargarGrillas(){
		
		hl_botonesGral.setSpacing(true);
		Form_gridLayout0.addComponent(hl_botonesGral,0,0,3,0);
		
		
		Form_gridLayout1.addComponent(idExp,0,0,0,0);
	    	Form_gridLayout1.addComponent(fecha,5,0,5,0);
	
	    	Form_gridLayout1.addComponent(fechaSalida,1,1,1,1);
	    	Form_gridLayout1.addComponent(fechaRegreso,3,1,4,1);
	
	    	Form_gridLayout1.addComponent(cmbChofer,0,2,4,2);
	    	Form_gridLayout1.addComponent(chkChofer,5,2,5,2);
			
		Form_gridLayout1.addComponent(cmbMarca,0,3,1,3);
	    	Form_gridLayout1.addComponent(cmbModelo,2,3,3,3);
	    	Form_gridLayout1.addComponent(cmbDominio,4,3,4,3);
	    	Form_gridLayout1.addComponent(chkVehiculo,5,3,5,3);
	    	
	    	Form_gridLayout1.addComponent(txtMotivo,0,4,5,5);
	
	    	
	    	Form_gridLayout1.setComponentAlignment(fecha, Alignment.MIDDLE_RIGHT);
	    	Form_gridLayout1.setComponentAlignment(chkChofer, Alignment.MIDDLE_LEFT);
		Form_gridLayout1.setComponentAlignment(chkVehiculo, Alignment.MIDDLE_LEFT);
      	
	}
	
	
	private boolean validarCampos(){
		try{
			fecha.setValidationVisible(true);
			fechaSalida.setValidationVisible(true);
			fechaRegreso.setValidationVisible(true);

			fecha.validate();
			fechaSalida.validate();
			fechaRegreso.validate();
	
			
			if(chkChofer.getValue()){
				cmbChofer.setValidationVisible(true);
				
				cmbChofer.validate();
			} else{
				cmbChofer.setValidationVisible(false);
			}
			
			if(chkVehiculo.getValue()){
				cmbMarca.setValidationVisible(true);
				cmbModelo.setValidationVisible(true);
				cmbDominio.setValidationVisible(true);
				
				cmbMarca.validate();
				cmbModelo.validate();
				cmbDominio.validate();
			} else{
				cmbMarca.setValidationVisible(false);
				cmbModelo.setValidationVisible(false);
				cmbDominio.setValidationVisible(false);
			}
			
	
			return true;
			
		}catch(Exception e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
		}
		/*
		catch(NumberFormatException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}catch(Validator.InvalidValueException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}*/
		
	}
	
	
	
	
///////////////////////////////////////////////	
///////////////////////////////////////////////	

///////////////////////////////////////////////	
///////////////////////////////////////////////
	
	
	
	
	@AutoGenerated
	private void buildMainLayout() {	
		
		Form_mainLayout = new VerticalLayout();
		Form_mainLayout.setImmediate(false);
		Form_mainLayout.setWidth("100%");
		Form_mainLayout.setHeight("100%");
		Form_mainLayout.setSizeFull();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		//  verticalSplitPanel_1
	    contenedorPanel = buildContenedorPanel();
	    Form_mainLayout.addComponent(contenedorPanel);
 
		
	}
	

	private Panel buildContenedorPanel() {
		
		// common part: create layout
		Panel Form_contenedorPanel = new Panel();
		Form_contenedorPanel.setImmediate(false);
		Form_contenedorPanel.setWidth("100.0%");
		Form_contenedorPanel.setHeight("100.0%");
//		Form_contenedorPanel.setSizeFull();
		
		Panel Form_panel0 = new Panel();
		Panel Form_panel1 = new Panel();
//		Panel Form_panel2 = new Panel();

		
		Form_gridLayout0 = new GridLayout(6,1);
    		Form_gridLayout0.setWidth("100.0%");
//    	Form_gridLayout0.setHeight(2f,Unit.EM);
	    	Form_gridLayout0.setColumnExpandRatio(0, 0);
	    	Form_gridLayout0.setColumnExpandRatio(1, 0);
	    	Form_gridLayout0.setColumnExpandRatio(2, 0);
	    	Form_gridLayout0.setColumnExpandRatio(3, 0);
	    	Form_gridLayout0.setColumnExpandRatio(4, 0);

	    	Form_gridLayout0.setSpacing(true);
    	
		Form_gridLayout1 = new GridLayout(6,6);
	    	Form_gridLayout1.setWidth("100.0%");
	    	Form_gridLayout1.setColumnExpandRatio(0, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(1, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(2, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(3, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(4, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(5, 1f);
	    	
	    	Form_gridLayout1.setSpacing(true);
	
 //   	Form_gridLayout2 = new GridLayout(1,2);
 //   	Form_gridLayout2.setWidth("100.0%");
 //   	Form_gridLayout2.setHeight(170,Unit.PIXELS);
 //   	Form_gridLayout2.setRowExpandRatio(0, 0);
 //   	Form_gridLayout2.setRowExpandRatio(1, 1f);
    	
	    	Form_panel0.setContent(Form_gridLayout0);
	    	Form_panel1.setContent(Form_gridLayout1);
  //  	Form_panel2.setContent(Form_gridLayout2);

		// verticalLayout_1
	    	VerticalLayout Form_verticalLayout_1 = new VerticalLayout();
		Form_verticalLayout_1.setImmediate(false);
		Form_verticalLayout_1.setWidth("100.0%");
		Form_verticalLayout_1.setHeight("100.0%");
		Form_verticalLayout_1.setMargin(true);
		Form_verticalLayout_1.addComponents(Form_panel0,Form_panel1);
		Form_verticalLayout_1.setSpacing(true);
		
		Form_contenedorPanel.setContent(Form_verticalLayout_1);
		
		return Form_contenedorPanel;
		
	// grilla >> panel >> verticalLayout >> panel	
	}



}

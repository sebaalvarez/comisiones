package sec.comisiones.vistas;

import java.sql.SQLException;
import java.util.function.Consumer;

import org.vaadin.dialogs.ConfirmDialog;

import sec.comisiones.dao.CategoriasDAO;
import sec.comisiones.dao.EmpleadosDAO;
import sec.comisiones.dao.EmpleadosPorProgramaDAO;
import sec.comisiones.dao.EspecialidadesDAO;
import sec.comisiones.dao.ProgramasDAO;
import sec.comisiones.dao.RolesDAO;
import sec.comisiones.dao.RolesPorUsuariosDAO;
import sec.comisiones.dao.UsuariosDAO;
import sec.comisiones.manager.EmpleadosManager;
import sec.comisiones.manager.RolesManager;
import sec.comisiones.mapeos.Empleados;
import sec.comisiones.mapeos.Programas;
import sec.comisiones.mapeos.Usuarios;
import sec.comisiones.vistas.ErrorLabel;
import sec.comisiones.vistas.ErrorfulFieldGroup;











import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Sizeable.Unit;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification.Type;

@SuppressWarnings("serial")
public class EmpleadosPorProgramaForm extends CustomComponent {

	private VerticalLayout mainLayout;
	private Panel contenedorPanel;
	private VerticalLayout verticalLayout_1;
	final EmpleadosManager tblUser = new EmpleadosManager();
	private Table tb;
	NativeButton btnNew=new NativeButton();
	Usuarios usrLog = new Usuarios();

	private CategoriasDAO categoriasDao = new CategoriasDAO();
//	private BeanContainer<Integer, Categorias> beanRoles = null;
	
	private EspecialidadesDAO especialidadesDao = new EspecialidadesDAO();
	
	
	int idPrograma;
	
	public EmpleadosPorProgramaForm() {
		ini();
	}
	
	public EmpleadosPorProgramaForm(Usuarios usr, int idPrograma) {
		this.usrLog = usr;
		this.idPrograma = idPrograma;
		ini();
	}

	
///////////////////////////////////////////////	
///////////////////////////////////////////////
	private void ini(){
		buildMainLayout();
		setCompositionRoot(mainLayout);	
	
		
		btnNew.setCaptionAsHtml(true);
		btnNew.setCaption(FontAwesome.PLUS.getHtml() + " Nuevo" );
		
		tb = tblUser.cargaTablaEmpleadosPorPrograma(idPrograma);
		verticalLayout_1.removeAllComponents();
		verticalLayout_1.addComponent(btnNew);
		verticalLayout_1.addComponent(tb);
		verticalLayout_1.setExpandRatio(tb, 1.0f);
		tb.setHeight(6, Unit.CM);
		tb.setEnabled(true);
		btnNew.setEnabled(true);
		
		final MyForm myform = new MyForm(usrLog);
		myform.setVisible(true);
		verticalLayout_1.addComponent(myform);
		
		
		tb.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
			//    	Notification.show("item selected: "+  tb.getValue(), Notification.Type.HUMANIZED_MESSAGE ); 
		            myform.setItemDataSource(tb.getItem(selectedItemId));
		            if (! myform.isVisible()) {
		                tb.setCurrentPageFirstItemId(selectedItemId);
		                myform.setVisible(true);}
			    	} else {
				   //    	Notification.show("Nothing selected ", Notification.Type.HUMANIZED_MESSAGE );
					//    	myform.setVisible(false);
					    	ini();
					    }
			    }
		});
		
		
		btnNew.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				
				ProgramasDAO us = new ProgramasDAO();
				EmpleadosPorProgramaDAO u=new EmpleadosPorProgramaDAO();
				
				Programas itemCat;
				try {
						itemCat = us.DevuelveProg(idPrograma);
						Item item = u.getItemEmpleadosDePrograma(itemCat);
			            myform.setItemDataSource(item);
				        myform.setVisible(true);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						}

				}
		});
		
		
	}
	

///////////////////////////////////////////////	
///////////////////////////////////////////////	
	// Show item details here
	class MyForm extends FormLayout {

		TextField id = new TextField("id");
	    TextField idPrograma = new TextField("id Programa");
	    TextField descPrograma = new TextField("Nombre Programa");
	    TextField idEmpleado = new TextField("id Empleado");
	    TextField idPersona1 = new TextField("id Persona");
	    TextField descEmpleado = new TextField("Nombre Empleado");
	    TextField descPersona1 = new TextField("Nombre Persona");
	    ComboBox idCategoria = new ComboBox("Categoría");
	    ComboBox idEspecialidad = new ComboBox("Especialidad");
	    
	    NativeButton btnEmpleado = new NativeButton("...");
	    
	    HorizontalLayout hl_2= new HorizontalLayout(id,idPrograma,descPrograma);
	    HorizontalLayout hl_3= new HorizontalLayout(idEmpleado,idPersona1,descEmpleado,descPersona1,btnEmpleado, idCategoria,idEspecialidad);
   
		NativeButton btnGraba = new NativeButton("Actualiza");
	    NativeButton btnElimina = new NativeButton("Elimina");
	    NativeButton btnCancela = new NativeButton("Cancela");
	    HorizontalLayout hl_1= new HorizontalLayout(btnGraba,btnElimina,btnCancela);
	    Usuarios usrLog = new Usuarios();
	    
	    public MyForm(){

	    }
	    
	    public MyForm(Usuarios us){
	    	usrLog=us;
	    }
	    
	    public void setItemDataSource(Item item) {
	    	
	    	idCategoria.setContainerDataSource(categoriasDao.getAllCategoriasContainer());
	    	idEspecialidad.setContainerDataSource(especialidadesDao.getAllEspecialidadesContainer());
	        addComponents(hl_2,hl_3,hl_1);
	//        FieldGroup binder = new FieldGroup(item);
	//        binder.bindMemberFields(this);
	        
	        // Bind the form
	        final ErrorfulFieldGroup binder = new ErrorfulFieldGroup(item);
	        binder.setBuffered(true);
	        binder.bindMemberFields(this);

	        // Have an error display
	        final ErrorLabel formError = new ErrorLabel();
	        formError.setWidth(null);
	      //addComponent(formError);
	        
	        binder.setErrorDisplay(formError);
            
	        
	        
	        
	        btnGraba.addStyleName("Small");	        
	        btnGraba.setImmediate(true);
	    //	btnModifica.setDescription("Guarda Modificaciones");

	    	
	    	btnElimina.addStyleName("Small");
    	
	    	id.setEnabled(false);
	    	idPrograma.setEnabled(false);
	    	descPrograma.setEnabled(false);
	    	idEmpleado.setEnabled(false);
	    	descEmpleado.setEnabled(false);
	    	idPersona1.setEnabled(false);
	    	descPersona1.setEnabled(false);
	    	
	    	idCategoria.addStyleName("Small");
	    	idCategoria.setRequired(true);
	    	idCategoria.setRequiredError("Campo Obligatorio");
	    	idCategoria.setItemCaptionPropertyId("nombre");
	    	idCategoria.setImmediate(true);
	    	idCategoria.setInvalidAllowed(true);
	    	idCategoria.setNullSelectionAllowed(true);
	    	idCategoria.setTextInputAllowed(false);
	    	
	    	idEspecialidad.addStyleName("Small");
	    	idEspecialidad.setRequiredError("Campo Obligatorio");
	    	idEspecialidad.setItemCaptionPropertyId("nombre");
	    	idEspecialidad.setImmediate(true);
	    	idEspecialidad.setInvalidAllowed(true);
	    	idEspecialidad.setNullSelectionAllowed(true);
	    	idEspecialidad.setTextInputAllowed(false);
	    	
	    	
/*	    	
	    	descCatastro.addStyleName("Small");
	    	descCatastro.setRequired(true);
	    	descCatastro.setRequiredError("Campo Obligatorio");
	    	descCatastro.addValidator(new StringLengthValidator("Longitud M�xima 15 caracteres", 0, 15, true));
	    	descCatastro.setImmediate(true);
	    	descCatastro.setValidationVisible(true);

	
	    	descPersona.addStyleName("Small");
	    	descPersona.setRequired(true);
	    	descPersona.setRequiredError("Campo Obligatorio");
	    	descPersona.addValidator(new StringLengthValidator("Longitud M�xima 15 caracteres", 0, 15, true));
	    	descPersona.setImmediate(true);
	    	descPersona.setValidationVisible(true);
	    	
	    	descPersona1.addStyleName("Small");
	    	idPersona1.addStyleName("Small");
*/	    	
	    	
	    	
	    	btnGraba.setEnabled(false);
	    	
	    	
	    	hl_2.setSpacing(true);
	        hl_3.setSpacing(true);
	    	
	        
	    	idEmpleado.setWidth(5f,Unit.EM);
	    	idPersona1.setWidth(5f,Unit.EM);
	    	descEmpleado.setWidth(25f,Unit.EM);
	    	descPersona1.setWidth(25f,Unit.EM);
	    	idCategoria.setWidth(8f,Unit.EM);
	    	
	    	hl_3.setComponentAlignment(btnEmpleado, Alignment.BOTTOM_LEFT);
	    	
	    	tb.setEnabled(false);
			btnNew.setEnabled(false);
	    	
	    	if ((Integer) item.getItemProperty("id").getValue() == 0){
	    		btnGraba.setCaption("Graba Nuevo");
	    		btnGraba.setEnabled(true);
				btnElimina.setEnabled(false);
				tb.setSelectable(false);
				idEmpleado.setVisible(false);
	    		descEmpleado.setVisible(false);
	    		idPersona1.setVisible(true);
	    		descPersona1.setVisible(true);
	    		btnEmpleado.setVisible(true);
	    	}else{
	    		idPersona1.setVisible(false);
	    		descPersona1.setVisible(false);
	    		idEmpleado.setVisible(true);
	    		descEmpleado.setVisible(true);
	    		btnEmpleado.setVisible(false);
	    		idCategoria.setEnabled(false);
	    		idEspecialidad.setEnabled(false);
	    	}
	    	
	    	
		//////////////////////////////////
		///////// BOTONES ////////////////
		//////////////////////////////////	   
	    	
	    	btnGraba.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
						try {
							binder.commit();
							int idEsp=0;
							EmpleadosPorProgramaDAO u = new EmpleadosPorProgramaDAO();
							if (!idEspecialidad.isEmpty()){
								idEsp=(int)idEspecialidad.getValue();
							}
							
							if (!idCategoria.isEmpty() && !idCategoria.getValue().equals(0) && !idCategoria.getValue().equals(null) && !idPersona1.isEmpty()){
								if(btnGraba.getCaption()=="Graba Nuevo"){
									if (u.existe(Integer.parseInt(idPrograma.getValue()), Integer.parseInt(idPersona1.getValue()))==0){
										u.agrega(Integer.parseInt(idPrograma.getValue()), Integer.parseInt(idPersona1.getValue()), (int)idCategoria.getValue(), idEsp, usrLog.getId()); 
										ini();
									}else{
											Notification.show("La persona seleccionada ya se encuentra registrada en el programa. ", Type.ERROR_MESSAGE);	
									}	
								} else if (btnGraba.getCaption()=="Actualiza"){
			//							u.modifica(Integer.parseInt(idUsuario.getValue()), Integer.parseInt(idRol.getValue()), usrLog.getId()); 		
										ini();
								}
							
							} else {
								Notification.show("Existen campos oblicatorios vacios. ", Type.ERROR_MESSAGE);
							}

						} catch (CommitException e) {
							e.printStackTrace();
						}
				}
			});
	        
        
	        btnElimina.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
					
					ConfirmDialog.show(getUI(), "Confirmar", "¿Desea eliminar el registro seleccionado?","Sí", "No", new ConfirmDialog.Listener() {
						public void onClose(ConfirmDialog dialog) {
					          if (dialog.isConfirmed()) {
					               // C�digo S�
					        	  		EmpleadosPorProgramaDAO u = new EmpleadosPorProgramaDAO();
									u.elimina(Integer.parseInt(id.getValue()), usrLog.getId()); 		
									ini();	
					          } else {
					               // C�digo No     
					          }
					     }
					});
				}
			});
	        
	        
	        btnCancela.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
						ini();
					}
			});

	        
	        
	        btnEmpleado.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
					UI.getCurrent().addWindow(new MySubEmpleados(Integer.parseInt(id.getValue()),"Empleados", (newValue)  -> {
							descPersona1.setValue(newValue.getDescEmpleado());
							idPersona1.setValue(String.valueOf(newValue.getId()));
			                //    Notification.show("Saved: " + newValue , Type.ERROR_MESSAGE);
			                }));
					}
			});
	        
	        
	    }
	};


	
///////////////////////////////////////////////	
///////////////////////////////////////////////
//Show Roles de Usuario
class MySubEmpleados extends Window {
	final EmpleadosManager tblUser = new EmpleadosManager();
	Table tb;
	String filtro="";
	
	public MySubEmpleados(int idPrograma, String tipo, Consumer<Empleados> save) {
		super(tipo); // Set window caption
		center();
		setModal(true);
		//  setClosable(false);
		setResizable(false);
		this.setWidth(60, Unit.PERCENTAGE);
		this.setHeight(90, Unit.PERCENTAGE);
		VerticalLayout content = new VerticalLayout();
		content.setMargin(true);
		content.setSpacing(true);
		
//		TextField valueEditor = new TextField("Value to edit", String.valueOf(idCatastro));
		
				
		TextField txtNombre =new TextField("Nombre"); 
		Button btnFiltro = new Button("Filtrar");
		tb = tblUser.cargaTabla();
		HorizontalLayout hl_0= new HorizontalLayout();
		hl_0.addComponents(txtNombre,btnFiltro);
		hl_0.setSpacing(true);
		hl_0.setComponentAlignment(btnFiltro, Alignment.BOTTOM_CENTER);
		
		// Trivial logic for saving the edited data
/*		@SuppressWarnings("unused")
		Button saveButton = new Button("Save", (click) -> {
			// Close the sub-window
			close();
			save.accept(valueEditor.getValue());
		});
*/		
		
//		verticalLayout_1.removeAllComponents();
//		verticalLayout_1.addComponents(valueEditor,saveButton);
		content.addComponents(hl_0);
		content.addComponent(tb);
		content.setExpandRatio(tb, 1.0f);
		
	
		// Handle selection change.
		tb.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
		//	    	Notification.show("item selected: "+  tb.getItem(selectedItemId).getItemProperty("nombre").getValue(), Notification.Type.HUMANIZED_MESSAGE ); 
			    	Empleados per = new Empleados((int)tb.getItem(selectedItemId).getItemProperty("id").getValue(), 
			    			(int)tb.getItem(selectedItemId).getItemProperty("dni").getValue(), (String)tb.getItem(selectedItemId).getItemProperty("nombre").getValue(), 
			    			(String)tb.getItem(selectedItemId).getItemProperty("apellido").getValue());
			    	save.accept(per);
			    	//save.accept((String) tb.getItem(selectedItemId)..getItemProperty("nombre").getValue());
		            close();
		            
			    	} 
			    }
		});
		
		
		btnFiltro.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				
				if (txtNombre.isEmpty()) {
					filtro = "";
				} else { 
					filtro = txtNombre.getValue(); 
				}
				
				content.removeComponent(tb);
				tb = tblUser.cargaTabla(filtro);
				content.addComponent(tb);
				content.setExpandRatio(tb, 1.0f);
				
				
				// Handle selection change.
				tb.addValueChangeListener(new ValueChangeListener() {
				    public void valueChange(ValueChangeEvent event) {
				    	Object selectedItemId = event.getProperty().getValue();
					    if (selectedItemId != null) {
				//	    	Notification.show("item selected: "+  tb.getItem(selectedItemId).getItemProperty("nombre").getValue(), Notification.Type.HUMANIZED_MESSAGE ); 
					    	Empleados per = new Empleados((int)tb.getItem(selectedItemId).getItemProperty("id").getValue(), 
					    			(int)tb.getItem(selectedItemId).getItemProperty("dni").getValue(), (String)tb.getItem(selectedItemId).getItemProperty("nombre").getValue(), 
					    			(String)tb.getItem(selectedItemId).getItemProperty("apellido").getValue());
					    	save.accept(per);
					    	//save.accept((String) tb.getItem(selectedItemId)..getItemProperty("nombre").getValue());
				            close();
				            
					    	} 
					    }
				});
				
				
				}
		});
		
		
		
	//	content.addComponents(valueEditor, saveButton);
		
		setContent(content);
	}
}

///////////////////////////////////////////////	
///////////////////////////////////////////////
	
///////////////////////////////////////////////	
///////////////////////////////////////////////	
	
	
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setSizeFull();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		//  verticalSplitPanel_1
	    contenedorPanel = buildContenedorPanel();
		mainLayout.addComponent(contenedorPanel);
 
		return mainLayout;
	}

	private Panel buildContenedorPanel() {
		// common part: create layout
		contenedorPanel = new Panel();
		contenedorPanel.setImmediate(false);
		contenedorPanel.setWidth("100.0%");
		contenedorPanel.setHeight("100.0%");
		contenedorPanel.setSizeFull();
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(true);
		contenedorPanel.setContent(verticalLayout_1);
		
		return contenedorPanel;
	}
	


}

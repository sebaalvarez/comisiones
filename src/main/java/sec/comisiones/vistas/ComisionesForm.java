package sec.comisiones.vistas;


import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

import org.vaadin.dialogs.ConfirmDialog;

import sec.comisiones.dao.CategoriasDAO;
import sec.comisiones.dao.ChoferesDAO;
import sec.comisiones.dao.AreasDAO;
import sec.comisiones.dao.ComisionesDAO;
import sec.comisiones.dao.DetalleComisionadosDAO;
import sec.comisiones.dao.DetalleDestinosDAO;
import sec.comisiones.dao.DetalleVehiculosDAO;
import sec.comisiones.dao.EmpleadosDAO;
import sec.comisiones.dao.LocalidadesDAO;
import sec.comisiones.dao.MarcasDAO;
import sec.comisiones.dao.ModelosDAO;
import sec.comisiones.dao.ProgramasDAO;
import sec.comisiones.dao.ProvinciasDAO;
import sec.comisiones.dao.VehiculosDAO;
import sec.comisiones.manager.DetalleComisionadosManager;
import sec.comisiones.manager.DetalleDestinosManager;
import sec.comisiones.mapeos.Comisiones;
import sec.comisiones.mapeos.DetalleComisionados;
import sec.comisiones.mapeos.DetalleDestinos;
import sec.comisiones.mapeos.DetalleVehiculos;
import sec.comisiones.mapeos.Usuarios;

import com.agpro.controles.Formateos;
import com.agpro.controles.ReportManagerAbstract;
import com.agpro.controles.Validaciones;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.converter.StringToFloatConverter;
import com.vaadin.data.validator.FloatRangeValidator;
import com.vaadin.server.FontAwesome;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;


@SuppressWarnings("serial")
public class ComisionesForm extends CustomComponent  {

	private	TabSheet tabsheet_mainTabSheet;
	private GridLayout Form_gridLayout0; 
	private GridLayout Form_gridLayout1;  
	private GridLayout Form_gridLayout3;
	private GridLayout Form_gridLayout4;
	
	HorizontalLayout hl_botonesGral = new HorizontalLayout();
	
    VerticalLayout vl_0 = new VerticalLayout();
    VerticalLayout vl_1 = new VerticalLayout();
    
	private Table tblComisionados;
	private Table tblDestinos;
	
	private DetalleComisionadosManager tblDetComisionados = new DetalleComisionadosManager();
	private DetalleDestinosManager tblDetDestinos = new DetalleDestinosManager();
	
	
	private TextField idExp = new TextField("Nº Comisión");
	private TextField txtNExpediente = new TextField("Nº Expediente");
	private DateField fecha = new DateField("Fecha");
	private TextField txtEstado = new TextField("Estado");
	private DateField fechaSalida = new DateField("Fecha/Hora Salida");
	private DateField fechaRegreso = new DateField("Fecha/Hora Regreso");
	private ComboBox cmbArea = new ComboBox("Area");
	private ComboBox cmbPrograma = new ComboBox("Programa");
	private CheckBox chkReqVehiculo = new CheckBox ("Requiere Vehículo");
	private ComboBox cmbSolicitante = new ComboBox("Solicitante");
	private CheckBox chkAut = new CheckBox ("Autorizada");
	private DateField fechaAut = new DateField("Fecha Aut.");
	private TextField txtUserAut = new TextField("Autorizador");
	private TextArea txtMotivo = new TextArea("Motivo");
	private TextArea txtObsRech = new TextArea("Observaciones");
	
    
	private Panel pnlTblComisionados = new Panel();
	private Panel pnlTblDestinos = new Panel();
	
	
	private ComboBox cmbChofer = new ComboBox("Chofer Asignado");
	private ComboBox cmbMarca = new ComboBox("Marca");
	private ComboBox cmbModelo = new ComboBox("Modelo");
	private ComboBox cmbDominio = new ComboBox("Dominio");
	private TextField txtCantKm = new TextField("Km Estimados");
	private TextField txtCantComb = new TextField("Lts Combustible Est.");
	private TextField txtImpEstTarj = new TextField("$ Est. Tarjeta de Comb.");
	private TextField txtImpEstExceso = new TextField("$ Est. Exceso");
	private TextArea txtObservacion = new TextArea("Observación");
	private TextField txtUsrAutVehiculo = new TextField("Autorizador de Vehículo");
	private DateField txtFechaAutVehiculo = new DateField("Fecha Aut. Vehículo");
	
	
	NativeButton btnAsignaExpediente = new NativeButton("Asigna Expediente");
	NativeButton btnAsignarVehiculo = new NativeButton("Asignar Vehículo");
	NativeButton btnGrabar = new NativeButton("Grabar");
	NativeButton btnGenerar = new NativeButton("Generar Solicitud");
	NativeButton btnModificar = new NativeButton("Modificar");
	NativeButton btnCancelar = new NativeButton("Cancelar");
	NativeButton btnAutorizar = new NativeButton("Autorizar");
	NativeButton btnRechazar = new NativeButton("Rechazar");
	NativeButton btnNewComisionado = new NativeButton("");
	NativeButton btnNewDestino = new NativeButton("");
	NativeButton btnReporte1 = new NativeButton("Rpt Autorización");
	NativeButton btnReporte2 = new NativeButton("Rpt Vehículo");
	NativeButton btnReporte3 = new NativeButton("Rpt Anticipos");
	NativeButton btnEliminaPlanif = new NativeButton("Cancela Planificación");
	NativeButton btnCierre = new NativeButton("Salir");
	
	NativeButton btnConsultaChoferes = new NativeButton("");
	NativeButton btnConsultaVehiculos = new NativeButton("");
	
    Formateos format = new Formateos();
	Validaciones valid = new Validaciones();
	Usuarios usrLog = new Usuarios();
	ComisionesDAO u = new ComisionesDAO();
	DetalleVehiculosDAO dv = new DetalleVehiculosDAO();
	DetalleComisionadosDAO dc = new DetalleComisionadosDAO();
	DetalleDestinosDAO dd = new DetalleDestinosDAO();
	AreasDAO act = new AreasDAO();
	ProgramasDAO prg = new ProgramasDAO();
	EmpleadosDAO emp = new EmpleadosDAO();
	ChoferesDAO chof = new ChoferesDAO();
	MarcasDAO marca = new MarcasDAO();
	ModelosDAO modelo = new ModelosDAO();
	VehiculosDAO vehiculo = new VehiculosDAO();
	Comisiones comision = new Comisiones();
	CategoriasDAO catDAO = new CategoriasDAO();
	
	String idPlanificacion = "";
	String flag = "";
	int bandera=0;
	int idEstado=0;
	float duracion=0;
	
	SimpleDateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy HH:mm");
	DecimalFormat df = new DecimalFormat("##,##0.00");
	
	
	
	
	public ComisionesForm() {
		ini(idPlanificacion,bandera);  
	}
	
	public ComisionesForm(Usuarios usr) {
		usrLog= usr;
		ini(idPlanificacion,bandera);   
	}
	
	public ComisionesForm(Usuarios usr, String idPlanif) {
		usrLog= usr;
		this.idPlanificacion=idPlanif;
		ini(idPlanificacion,bandera);  
	}

	public ComisionesForm(Usuarios usr, String idPlanif, String flag) {
		usrLog= usr;
		this.idPlanificacion=idPlanif;
		this.flag=flag;
		ini(idPlanificacion,bandera);  
	}
	
	public ComisionesForm(Usuarios usr, String idPlanif, String flag, NativeButton btnCierre1) {
		usrLog= usr;
		this.idPlanificacion=idPlanif;
		this.flag=flag;
		this.btnCierre=btnCierre1;
		ini(idPlanificacion,bandera);   
	}
	
	
	
	///////////////////////////////////////////////	
	///////////////////////////////////////////////	
	
	private void ini(String idPlanificacion, int bandera){
		buildMainLayout();
		
		setCompositionRoot(tabsheet_mainTabSheet);
    
	    
		btnAsignarVehiculo = new NativeButton("Asignar Vehículo");
		btnAsignaExpediente = new NativeButton("Asigna Expediente");
		btnGrabar = new NativeButton("Grabar");
		btnGenerar = new NativeButton("Generar Solicitud");
		btnModificar = new NativeButton("Modificar");
		btnCancelar = new NativeButton("Cancelar");
		btnAutorizar = new NativeButton("Autorizar");
		btnRechazar = new NativeButton("Rechazar");
		btnNewComisionado = new NativeButton("");
		btnNewDestino = new NativeButton("");
		btnReporte1 = new NativeButton("Rpt Autorización");
		btnReporte2 = new NativeButton("Rpt Vehículo");
		btnReporte3 = new NativeButton("Rpt Anticipos");
		btnEliminaPlanif = new NativeButton("Cancela Planificación");
		
		btnConsultaChoferes = new NativeButton("Disponibilidad Choferes");
		btnConsultaVehiculos = new NativeButton("Disponibilidad Vehículos");
	    
		
	    idExp.setValue(String.valueOf(idPlanificacion));
	    
	    tblComisionados = tblDetComisionados.cargaTabla(Integer.parseInt(idExp.getValue()));
	    tblDestinos = tblDetDestinos.cargaTabla(Integer.parseInt(idExp.getValue()));
	    
	    
	    pnlTblComisionados.setContent(tblComisionados);
	    pnlTblDestinos.setContent(tblDestinos);

	    
	    
	    chkReqVehiculo.setValue(true);
	    
    	
	    
	    setearFormatoComponentes();
	    
	    cargarCombos();
    	
    		setearValidaciones();
	    
	    deshabilitarCampos();

	    definirTamañoCampos();
		
		cargarGrillas();
		
		

    	
		btnNewComisionado.setEnabled(true);
		btnNewDestino.setEnabled(true);
		    
		
		idExp.setEnabled(false);
		txtNExpediente.setEnabled(false);
		txtEstado.setEnabled(false);
		txtObsRech.setEnabled(false);
		chkAut.setEnabled(false);
		fechaAut.setEnabled(false);
		txtUserAut.setEnabled(false);
		txtUsrAutVehiculo.setEnabled(false);
	    txtFechaAutVehiculo.setEnabled(false);
		

		
		if (idExp.getValue()=="0") {
			if (flag=="carga"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnGenerar,btnCancelar);
				btnModificar.setEnabled(false);
				btnGenerar.setEnabled(false);
				btnCancelar.setEnabled(false);
				btnNewComisionado.setEnabled(false);
				btnNewDestino.setEnabled(false);
				txtEstado.setValue("Nueva");
				deshabilitaVehiculo();
				
			} else if (flag=="autoriza"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnAutorizar,btnRechazar);
				deshabilitaVehiculo();
			}
    	} 

		
		
		if (idExp.getValue()!="0") {
			try {
				comision = u.DevuelveComision(Integer.parseInt(idExp.getValue()));
				idExp.setValue(String.valueOf(comision.getId()));
				idEstado=comision.getIdEstado();
				txtEstado.setValue(comision.getDescEstado());
				fecha.setValue(comision.getFecha());
				fechaSalida.setValue((comision.getFechaSalida()));
				fechaRegreso.setValue(comision.getFechaRegreso());
				chkReqVehiculo.setValue(comision.isReqVehiculo());
				txtMotivo.setValue(comision.getMotivo());
				txtObsRech.setValue(comision.getObservaciones());
				chkAut.setValue(comision.isAutorizada());
				fechaAut.setValue(comision.getFechaAutorizacion());
				txtUserAut.setValue(comision.getDescAutorizador());
				txtNExpediente.setValue(comision.getnExpediente());
				cmbArea.setValue(comision.getIdArea());
				int valorPrograma=comision.getIdPrograma();
				int valorSolicitante=comision.getIdSolicitante();
				
				if (cmbArea.isEmpty()){
						cmbPrograma.setContainerDataSource(prg.getAllProgramasContainer(0));
						cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer(0));
					} else {
						cmbPrograma.setContainerDataSource(prg.getAllProgramasContainer((int)cmbArea.getValue()));
						cmbPrograma.setValue(valorPrograma);
						if (cmbPrograma.isEmpty()){
								cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer(0));
							}else{
								cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer((int)cmbPrograma.getValue()));
								cmbSolicitante.setValue(valorSolicitante);
							}
					}
				
				
				
				DetalleVehiculos it = dv.DevuelveDetalleVehiculos(Integer.parseInt(idExp.getValue()));
				
				cmbChofer.setValue(it.getIdChofer());
				cmbMarca.setValue(it.getIdMarca());
				
		    	int valorModelo=it.getIdModelo();
				int valorDominio=it.getIdVehiculo();
				
				if (cmbMarca.isEmpty()){
					cmbModelo.setContainerDataSource(modelo.getAllModelosContainer(0));
					cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
					} else {
						cmbModelo.setContainerDataSource(modelo.getAllModelosContainer((int)cmbMarca.getValue()));
						cmbModelo.setValue(valorModelo);
						if (cmbModelo.isEmpty()){
							cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
							}else{
								cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer((int)cmbMarca.getValue(), (int)cmbModelo.getValue()));
								cmbDominio.setValue(valorDominio);
							}
					}
		    	
		    	
		    	txtCantKm.setValue(String.valueOf(df.format(it.getCantEstKmRecorrer())));
		    	txtCantComb.setValue(String.valueOf(df.format(it.getCantEstLitrosComb())));
		    	
		      	txtImpEstTarj.setValue(String.valueOf(df.format(it.getImpEstTarjetaComb())));
		      	txtImpEstExceso.setValue(String.valueOf(df.format(it.getImpEstExceso())));
		    	
		      	txtFechaAutVehiculo.setValue(it.getFechaAutorizacion());
		      	
		      	txtObservacion.setValue(it.getObservaciones());
		      	txtUsrAutVehiculo.setValue(it.getDescAutorizador());
				
		      		
			} catch (SQLException e) {
				Notification.show("No se pudo obtener el expediente seleccionado, comuniquese con el administrador del sistema",e.getMessage(),Type.HUMANIZED_MESSAGE);
				e.printStackTrace();
			}
			
			

			deshabilitaDatosGeneral();
			deshabilitaVehiculo();
			
			btnNewComisionado.setEnabled(false);
			btnNewDestino.setEnabled(false);
			tblComisionados.setSelectable(false);
			tblDestinos.setSelectable(false);
			
			
			if (flag=="carga"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnGenerar,btnCierre);
				btnGrabar.setEnabled(false);
				btnCancelar.setEnabled(false);
				
				if (idEstado>=2) {
					btnModificar.setEnabled(false);
					btnGenerar.setEnabled(false);
		       	}
				
				if (idEstado==1 || idEstado==5 || idEstado==6) {
					btnNewComisionado.setEnabled(true);
					btnNewDestino.setEnabled(true);
					tblComisionados.setSelectable(true);
					tblDestinos.setSelectable(true);
					btnModificar.setEnabled(true);
					btnGenerar.setEnabled(true);
					
					if(idEstado==5){
						btnModificar.setEnabled(false);
						btnGenerar.setEnabled(true);
					}
		       	}
				
				
				
				
				
			}else if (flag=="asignaVehiculo"){
				Form_gridLayout3.addComponent(btnAsignarVehiculo,0,0,0,0);
				Form_gridLayout3.addComponent(btnConsultaChoferes,1,0,1,0);
				Form_gridLayout3.addComponent(btnConsultaVehiculos,2,0,2,0);
				Form_gridLayout3.addComponent(btnRechazar,3,0,3,0);
				habilitaVehiculo();
				
				if (bandera==1) {
					btnAsignarVehiculo.setEnabled(false);
					btnRechazar.setEnabled(false);
					deshabilitaVehiculo();
				}
					
			
			}else if (flag=="autoriza"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnAutorizar,btnRechazar);
			
				if (bandera==1) {
					btnAutorizar.setEnabled(false);
					btnRechazar.setEnabled(false);
				}
				
			} else if (flag=="cnsTodas"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnReporte1,btnReporte2,btnReporte3);
				
			} else if (flag=="cnsGeneradas"){
				hl_botonesGral.removeAllComponents();
			//	hl_botonesGral.addComponents(btnReporte1,btnReporte2,btnReporte3);
				
			} else if (flag=="impresion") {
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnReporte1,btnReporte2,btnReporte3);
				
			} else if (flag=="asignaExpediente") {
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnAsignaExpediente);
				btnAsignaExpediente.setEnabled(true);
				txtNExpediente.setEnabled(true);
			}		
			
			
			
			
	   }
		
		
		
		
		cmbArea.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbPrograma.setContainerDataSource(prg.getAllProgramasContainer((int)cmbArea.getValue()));
					 cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer(0));
				 }
			 }
		});
	
		
		cmbPrograma.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer((int)cmbPrograma.getValue()));
				 }
			 }
		});

		
		cmbMarca.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbModelo.setContainerDataSource(modelo.getAllModelosContainer((int)cmbMarca.getValue()));
					 cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
				 }
			 }
		});
	
		
		cmbModelo.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosActivosContainer((int)cmbMarca.getValue(), (int)cmbModelo.getValue()));
				 }
			 }
		});
		
		
		cmbDominio.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					// consulto si ya se encuentra para ese rango de fechas
					 String mensaje="";
					 
					 VehiculosDAO vehi = new VehiculosDAO();
					 
					 mensaje=vehi.FechaReserva(Integer.parseInt(idExp.getValue()), (int) cmbDominio.getValue());
					 if(mensaje != ""){
						 Notification.show(mensaje,Type.ERROR_MESSAGE);
					 }
				 }
			 }	
		});

			
		cmbChofer.addValueChangeListener(new ValueChangeListener() {
				 public void valueChange(ValueChangeEvent event) {
					 Object selectedItemId = event.getProperty().getValue();
					 if (selectedItemId != null) {
						// consulto si ya se encuentra para ese rango de fechas
						 String mensaje=""; 
						 
						 ChoferesDAO chof = new ChoferesDAO();
						 
						 mensaje=chof.FechaReserva(Integer.parseInt(idExp.getValue()), (int) cmbChofer.getValue());
						 if(mensaje != ""){
							 Notification.show(mensaje,Type.ERROR_MESSAGE);
						 }
					 }
				 }	
			});

		
		
		
		
		btnModificar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				btnModificar.setEnabled(false);
				btnGenerar.setEnabled(false);
				btnGrabar.setEnabled(true);
			//	Form_gridLayout0.removeComponent(btnCierre);
			//	Form_gridLayout0.addComponent(btnCancelar,3,0,3,0);
				btnCancelar.setEnabled(true);
				fecha.setEnabled(true);
				fechaSalida.setEnabled(true);
				fechaRegreso.setEnabled(true);
				cmbArea.setEnabled(true);
				cmbPrograma.setEnabled(true);
				cmbSolicitante.setEnabled(true);
				chkReqVehiculo.setEnabled(true);
				txtMotivo.setEnabled(true);
				btnNewComisionado.setEnabled(true);
				btnNewDestino.setEnabled(true);
				tblComisionados.setSelectable(true);
				tblDestinos.setSelectable(true);
			}
		});
	
		
		btnCancelar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				btnModificar.setEnabled(true);
				btnGenerar.setEnabled(true);
				btnGrabar.setEnabled(false);
		//		Form_gridLayout0.removeComponent(btnCancelar);
		//		Form_gridLayout0.addComponent(btnCierre,3,0,3,0);
				btnCancelar.setEnabled(false);
				fecha.setEnabled(false);
				fechaSalida.setEnabled(false);
				fechaRegreso.setEnabled(false);
				cmbArea.setEnabled(false);
				cmbPrograma.setEnabled(false);
				cmbSolicitante.setEnabled(false);
				chkReqVehiculo.setEnabled(false);
				txtMotivo.setEnabled(false);
				btnNewComisionado.setEnabled(false);
				btnNewDestino.setEnabled(false);
				tblComisionados.setSelectable(false);
				tblDestinos.setSelectable(false);
				
				try {
					Comisiones item = u.DevuelveComision(Integer.parseInt(idExp.getValue()));
					idExp.setValue(String.valueOf(item.getId()));
					txtEstado.setValue(item.getDescEstado());
					fecha.setValue(item.getFecha());
					fechaSalida.setValue(item.getFechaSalida());
					fechaRegreso.setValue(item.getFechaRegreso());
					chkReqVehiculo.setValue(item.isAutorizada());
					txtMotivo.setValue(item.getMotivo());
					chkAut.setValue(item.isAutorizada());
					fechaAut.setValue(item.getFechaAutorizacion());
					txtUserAut.setValue(item.getDescAutorizador());
					txtNExpediente.setValue(item.getnExpediente());
					
					cmbArea.setValue(item.getIdArea());
					int valorPrograma=(int)item.getIdPrograma();
					int valorSolicitante=(item.getIdSolicitante());
					
					if (cmbArea.isEmpty()){
							cmbPrograma.setContainerDataSource(prg.getAllProgramasContainer(0));
							cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer(0));
						} else {
							cmbPrograma.setContainerDataSource(prg.getAllProgramasContainer((int)cmbArea.getValue()));
							cmbPrograma.setValue(valorPrograma);
							if (cmbPrograma.isEmpty()){
									cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer(0));
								}else{
									cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer((int)cmbPrograma.getValue()));
									cmbSolicitante.setValue(valorSolicitante);
								}
						}
				} catch (SQLException e) {
					Notification.show("No se pudo obtener el expediente seleccionado, comuniquese con el administrador del sistema.",e.getMessage(),Type.HUMANIZED_MESSAGE);
					e.printStackTrace();
				}
			    
				
			}
		});
		
		
		btnGenerar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {

				if (!validarCamposSolicitud()){
					Notification.show("Existen errores de validación","Revisar campos resaltados en rojo.",Type.ERROR_MESSAGE);
				} else {
				
					if (dc.hayComisionados(Integer.parseInt(idExp.getValue()))>0 && dd.hayDestinos(Integer.parseInt(idExp.getValue()))>0){
						ConfirmDialog.show(getUI(), "Confirmar", "¿Desea generar la solicitud?","Sí", "No", new ConfirmDialog.Listener() {
							public void onClose(ConfirmDialog dialog) {
							          if (dialog.isConfirmed()) {
							               // C�digo S�
											try {
												// el 2 se corresponde con el id de estado PENDVEHICULO 
												// el 3 se corresponde con el id de estado PENDAUTORIZACION
												int idEst=0;
												if(chkReqVehiculo.getValue()){
													idEst=2;
												}else{
													idEst=3;
												}
												
												if(idEstado==6){
													idEst=2;
												} else if (idEstado==5){
													idEst=3;
												}
												
												u.modificaEstado(Integer.parseInt(idExp.getValue()), idEst, usrLog.getId());
												dc.actualizaMontoViatico(Integer.parseInt(idExp.getValue()), usrLog.getId());
												
												btnCierre.click();
											} catch (Exception e) {
												e.printStackTrace();
											}
											
							          } else {
							               // C�digo No
							               
							          }
							}
						});
						
					} else{
						Notification.show("Debe ingresar comisionados y destinos antes de generar la Solicitud.",Notification.Type.ERROR_MESSAGE);
						
					}
				}
			}
		});
		
		
		btnGrabar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
	
				if (!validarCamposSolicitud()){
					Notification.show("Existen errores de validación","Revisar campos resaltados en rojo.",Type.ERROR_MESSAGE);
				} else {
					//calculoDuracionComision();
					duracion=comision.calculoDuracionComision(fechaSalida.getValue(), fechaRegreso.getValue());
					
					if (fechaSalida.getValue().before(fechaRegreso.getValue())){
						ConfirmDialog.show(getUI(), "Confirmar", "¿Desea guardar la solicitud?","Sí", "No", new ConfirmDialog.Listener() {
							public void onClose(ConfirmDialog dialog) {
							          if (dialog.isConfirmed()) {
							               // C�digo S�
											try {
												if(idExp.getValue()=="0"){
													// el 1 se corresponde con el id de estado EN CARGA
													u.agrega(dateFormat.format(fecha.getValue()), 1,
															(int)cmbArea.getValue(), (int)cmbPrograma.getValue(), (int)cmbSolicitante.getValue(),
															dateFormat.format(fechaSalida.getValue()), dateFormat.format(fechaRegreso.getValue()), 
															duracion,txtMotivo.getValue(),chkReqVehiculo.getValue(), usrLog.getId()
															);
													ini(String.valueOf(u.getUltimoId()),1);
												} else {
													u.modifica(Integer.parseInt(idExp.getValue()), dateFormat.format(fecha.getValue()), 1,
															(int)cmbArea.getValue(), (int)cmbPrograma.getValue(), (int)cmbSolicitante.getValue(),
															dateFormat.format(fechaSalida.getValue()), dateFormat.format(fechaRegreso.getValue()), 
															duracion,txtMotivo.getValue(),chkReqVehiculo.getValue(),usrLog.getId()
															);
													
													dc.actualizaDuracion(Integer.parseInt(idExp.getValue()), duracion, usrLog.getId());
													
													ini(idExp.getValue(),1);
												}
											} catch (Exception e) {
												e.printStackTrace();
												Notification.show("Error al intentar grabar el registro",e.getMessage(),Notification.Type.ERROR_MESSAGE);
											}
							          } else {}
							}    
						});
					} else{
						Notification.show("La Fecha/Hora de salida no puede ser posterior a la de regreso.",Notification.Type.ERROR_MESSAGE);
					}
				}
					
				}
			});
        
			
		btnRechazar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				ConfirmDialog.show(getUI(), "Confirmar", "¿Desea rechazar la solicitud?","Sí", "No", new ConfirmDialog.Listener() {
					public void onClose(ConfirmDialog dialog) {
					          if (dialog.isConfirmed()) {
					               // C�digo S�
									try {
										Window ventObs = new Window();
										
										UI.getCurrent().addWindow(ventObs); 
										ventObs.setCaption("Detalle Rechazo");
										ventObs.center();
										ventObs.setModal(true);
										ventObs.setResizable(false);
										ventObs.setClosable(false);
										ventObs.setWidth(10.5f, Unit.CM);
										ventObs.setHeight(6f, Unit.CM);
										
										TextArea mot=new TextArea("Ingrese el motivo del rechazo");
										NativeButton btnAcept= new NativeButton("Aceptar");
										CheckBox chkAuto= new CheckBox("Regresar a automotor");
										CheckBox chkSolicitante= new CheckBox("Regresar a solicitante");
										HorizontalLayout hl_0 = new HorizontalLayout();
										hl_0.setSpacing(true);
										hl_0.addComponents(chkAuto,chkSolicitante);
										btnAcept.setWidth(1.6f, Unit.CM);
										mot.setWidth(10f, Unit.CM);
										mot.setHeight(2.7f, Unit.CM);
										
										GridLayout g2 = new GridLayout(1,3);
										g2.setWidth(100, Unit.PERCENTAGE);
										g2.setHeight(100, Unit.PERCENTAGE);
										g2.setColumnExpandRatio(0, 1f);
										
										g2.setSpacing(true);
										g2.addComponent(hl_0,0,0,0,0);
										g2.addComponent(mot,0,1,0,1);
										g2.addComponent(btnAcept,0,2,0,2);
										g2.setComponentAlignment(hl_0, Alignment.MIDDLE_CENTER);
										g2.setComponentAlignment(mot, Alignment.MIDDLE_CENTER);
										g2.setComponentAlignment(btnAcept, Alignment.MIDDLE_CENTER);
										ventObs.setContent(g2);
										

										if(flag=="asignaVehiculo"){
											chkSolicitante.setValue(true);
											chkAuto.setValue(false);
											chkSolicitante.setEnabled(false);
											chkAuto.setEnabled(false);
										} else {
											chkSolicitante.setValue(false);
											chkAuto.setValue(false);
											chkSolicitante.setEnabled(true);
											chkAuto.setEnabled(true);
										}

										
										chkAuto.addValueChangeListener(new ValueChangeListener() {
											 public void valueChange(ValueChangeEvent event) {
												 if (event.getProperty().getValue().equals(true)) {chkSolicitante.setValue(false);}
											 }
										});
										
										chkSolicitante.addValueChangeListener(new ValueChangeListener() {
											 public void valueChange(ValueChangeEvent event) {
												 if (event.getProperty().getValue().equals(true)) {chkAuto.setValue(false);}
											 }
										});
										
										
										btnAcept.addClickListener((Click) -> {
											
											if(!mot.getValue().trim().isEmpty() && (chkAuto.getValue()==true || chkSolicitante.getValue()==true)){
												/* 
												 * el idEstado 5 y 7 se corresponde con el estado RECHAZADA por AUTORIZADOR
												 *    5 si regresa a solicitante
												 *    7 si regresa a automotores
												 * el idEstado 6 se corresponde con el estado RECHAZADA por AUTOMOTORES
												*/
												
												int idEst=0;
												String rec = "MOTIVO RECHAZO: ";
												
												switch (flag){
													case "autoriza":
														
														if(chkAuto.getValue()==true){
															idEst=7;
														} else {
															idEst=5;
														}
														
														rec = ""+ System.getProperty("line.separator") +"RECHAZO AUTORIZADOR: "+ dateFormat.format(new Date()) +" - MOTIVO: "+ mot.getValue();
														break;
														
													case "asignaVehiculo":
														idEst=6;
														rec = ""+ System.getProperty("line.separator") +"RECHAZO AUTOMOTORES: "+ dateFormat.format(new Date()) +" - MOTIVO: "+ mot.getValue();
														
														dv.elimina(dv.DevuelveDetalleVehiculos(Integer.parseInt(idExp.getValue())).getId(), usrLog.getId());
														
														int a=0;
														if(!cmbChofer.isEmpty()){a=chof.DevuelveChofer((int)cmbChofer.getValue()).getIdEmpleado();}

														dc.elimina(Integer.parseInt(idExp.getValue()), a, usrLog.getId());
														break;

												}
												
												u.modificaEstadoObservacion(Integer.parseInt(idExp.getValue()), idEst, rec, usrLog.getId());
												btnCierre.click();
											
												ventObs.close();
											}else{
												Notification.show("","Debe ingresar el motivo del rechazo y seleccionar a quien regresa la comisión.",Type.ERROR_MESSAGE);
											}
										});
										
										
					
									} catch (Exception e) {
										e.printStackTrace();
									}
					          } else {
					        	  
					          }
					}
				});

			}
		});
		
		
		btnAutorizar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				ConfirmDialog.show(getUI(), "Confirmar", "¿Desea autorizar la solicitud?","Sí", "No", new ConfirmDialog.Listener() {
					public void onClose(ConfirmDialog dialog) {
					          if (dialog.isConfirmed()) {
					               // C�digo S�
									try {
										u.autoriza(Integer.parseInt(idExp.getValue()), usrLog.getIdEmp(), usrLog.getId());
										btnCierre.click();
									} catch (Exception e) {
										e.printStackTrace();
									}
					          } else {
					          
					          }
					}
				});
			}
		});

		
		
		btnAsignaExpediente.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) throws NumberFormatException {
				if(txtNExpediente.isEmpty()){
					Notification.show("Existen errores de validación","Debe ingresar en Nº de Expediente.",Type.ERROR_MESSAGE);
				} else {
					ConfirmDialog.show(getUI(), "Confirmar", "¿Desea asignar el expediente?","Sí", "No", new ConfirmDialog.Listener() {
						public void onClose(ConfirmDialog dialog) {
						          if (dialog.isConfirmed()) {
						               // C�digo S�
							    		try{
							    			u.modificaExpediente(Integer.parseInt(idExp.getValue()), txtNExpediente.getValue(), usrLog.getId());
							    			
							    			btnCierre.click();
							    		} catch(Exception e){
							    			e.printStackTrace();
							    			Notification.show("Se produjo un error",e.getMessage(),Notification.Type.ERROR_MESSAGE);
							    		}
						          } else {
						          
						          }      
						}
					});
				}
				
			}
		});
		
		
		
		btnAsignarVehiculo.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) throws NumberFormatException {
				
					if (!validarCamposVehiculo()){
						Notification.show("Existen errores de validación","Revisar campos resaltados en rojo.",Type.ERROR_MESSAGE);
					} else {
						ConfirmDialog.show(getUI(), "Confirmar", "¿Desea asignar el vehículo a la solicitud?","Sí", "No", new ConfirmDialog.Listener() {
							public void onClose(ConfirmDialog dialog) {
							          if (dialog.isConfirmed()) {
							               // C�digo S�
								    		try{
								    			int idCom=Integer.parseInt(idExp.getValue());
								    			int idEmpChof = (int) cmbChofer.getItem((int)cmbChofer.getValue()).getItemProperty("idEmpleado").getValue();
								    			int idCatChofer = (int) cmbChofer.getItem((int)cmbChofer.getValue()).getItemProperty("idCategoria").getValue();
								    			int idProgChofer = (int) cmbChofer.getItem((int)cmbChofer.getValue()).getItemProperty("idPrograma").getValue();
								    			float monto = catDAO.DevuelveCategoria(idCatChofer).getMontoProvincial();
								    			float duracion=comision.calculoDuracionComision(fechaSalida.getValue(), fechaRegreso.getValue());
								    			

								    			DetalleComisionados it = new DetalleComisionados();
								    			it.setIdComision(idCom);
								    			it.setIdEmpleado(idEmpChof);
								    			it.setIdPrograma(idProgChofer);
								    			it.setIdCategoria(idCatChofer);
								    			it.setIdEspecialidad(0);
								    			it.setMontoCategoria(monto);
								    			it.setTiempoDuracion(duracion);
								    			float viaticos=duracion*monto;
								    			it.setViaticos(viaticos);
								    			// id tipo comisionado 1:empleado - 2:chofer  
								    			it.setIdTipoComisionado(2);
								    			
								    			
								    			int idDet=dv.DevuelveDetalleVehiculos(idCom).getId();
								    			
								    			if (idDet==0){
								    				dv.agrega(idCom, usrLog.getIdEmp(), (int)cmbChofer.getValue(), (int)cmbDominio.getValue(), 
															Float.parseFloat(txtCantKm.getValue().replace(".", "").replace(",",".")), 
															Float.parseFloat(txtCantComb.getValue().replace(".", "").replace(",",".")),
															Float.parseFloat(txtImpEstTarj.getValue().replace(".", "").replace(",",".")),
															Float.parseFloat(txtImpEstExceso.getValue().replace(".", "").replace(",",".")),
															txtObservacion.getValue(), usrLog.getId());
													
								    			} else {	
								    				dv.modifica(idDet, usrLog.getIdEmp(), (int)cmbChofer.getValue(), (int)cmbDominio.getValue(), 
															Float.parseFloat(txtCantKm.getValue().replace(".", "").replace(",",".")), 
															Float.parseFloat(txtCantComb.getValue().replace(".", "").replace(",",".")),
															Float.parseFloat(txtImpEstTarj.getValue().replace(".", "").replace(",",".")),
															Float.parseFloat(txtImpEstExceso.getValue().replace(".", "").replace(",",".")),
															txtObservacion.getValue(), usrLog.getId());
								    				
								    			}
								    			
								    			
								    			
								    			int idEst=3;
								    			if(idEstado==2){
								    				idEst=3;
								    			} else if(idEstado==6){
								    				idEst=3;
								    			}
								    			
								    			u.modificaEstado(idCom, idEst,usrLog.getId());
								    			
								    			dc.eliminaComisionadoChofer(idCom,usrLog.getId());
								    			
								    			if (dc.existe(0, idCom, idEmpChof)==0) {
								    				dc.agrega(it,usrLog.getId());
								    				dc.actualizaMontoViatico(Integer.parseInt(idExp.getValue()), usrLog.getId());
								    			}
								    			
								    			btnCierre.click();
								    		} catch(Exception e){
								    			e.printStackTrace();
								    			Notification.show("Se produjo un error",e.getMessage(),Notification.Type.ERROR_MESSAGE);
								    		}
							          } else {
							          
							          }      
							}
						});
					}
			}
		});
		
		
		btnConsultaChoferes.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().addWindow(new VentanaCalendario(0, Integer.parseInt(idExp.getValue()), "choferes", fechaSalida.getValue(), btnCierre, (newValue) -> {}));
			}
		});
		
		
		btnConsultaVehiculos.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().addWindow(new VentanaCalendario(0, Integer.parseInt(idExp.getValue()), "vehiculos", fechaSalida.getValue(), btnCierre, (newValue) -> {}));
			}
		});
		
		
		btnReporte1.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				
				criterio=u.criterio(idExp.getValue());
				
				parametro.put("filtro",criterio);
				
				ReportManagerAbstract.VerReporte("ComisionesAutorizacion.jasper", parametro);
			}
		});

		
		btnReporte2.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				
				criterio=u.criterio(idExp.getValue());
				
				parametro.put("filtro",criterio);
				
				ReportManagerAbstract.VerReporte("ComisionesVehiculo.jasper", parametro);
			}
		});
    
		
		btnReporte3.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				
				criterio=u.criterio(idExp.getValue());
				
				parametro.put("filtro",criterio);
				
				ReportManagerAbstract.VerReporte("ComisionesAnticipoFondos.jasper", parametro);
			}
		});
		
		
		btnNewComisionado.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
		   		UI.getCurrent().addWindow(new VentanaComisionadosABM(0, comision));
				}
		});
		
		
		btnNewDestino.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
		       		UI.getCurrent().addWindow(new VentanaDestinosABM(0, Integer.parseInt(idExp.getValue()), btnCierre, (newValue) -> {}));
				}
		}); 

		
		

		tblComisionados.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
		        	UI.getCurrent().addWindow(new VentanaComisionadosABM((int) tblComisionados.getValue(), comision));
			    	}
			    }
		});
		
		
		tblDestinos.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
		//	    	Notification.show("item selected: "+  tb.getValue(), Notification.Type.HUMANIZED_MESSAGE ); 
		        	UI.getCurrent().addWindow(new VentanaDestinosABM((int) tblDestinos.getValue(), Integer.parseInt(idExp.getValue()), btnCierre, (newValue) -> {}));
			    	}
			    }
		});
		
		
		
		

	}
	

	
	
	private void deshabilitaDatosGeneral(){
		fecha.setEnabled(false);
		fechaSalida.setEnabled(false);
		fechaRegreso.setEnabled(false);
		cmbArea.setEnabled(false);
		cmbPrograma.setEnabled(false);
		cmbSolicitante.setEnabled(false);
		chkReqVehiculo.setEnabled(false);
		txtMotivo.setEnabled(false);
		tblComisionados.setSelectable(false);
		tblDestinos.setSelectable(false);
	}
	
	
	private void deshabilitaVehiculo(){
		cmbChofer.setEnabled(false);
	    cmbMarca.setEnabled(false);
	    cmbModelo.setEnabled(false);
	    cmbDominio.setEnabled(false);
	    txtCantKm.setEnabled(false);
	    txtCantComb.setEnabled(false);
	    txtImpEstTarj.setEnabled(false);
	    txtImpEstExceso.setEnabled(false);
	    txtObservacion.setEnabled(false);
	
	}
	
	
	private void habilitaVehiculo(){
		cmbChofer.setEnabled(true);
	    cmbMarca.setEnabled(true);
	    cmbModelo.setEnabled(true);
	    cmbDominio.setEnabled(true);
	    txtCantKm.setEnabled(true);
	    txtCantComb.setEnabled(true);
	    txtImpEstTarj.setEnabled(true);
	    txtImpEstExceso.setEnabled(true);
	    txtObservacion.setEnabled(true);
	}

	
	private void setearFormatoComponentes(){
	    btnNewComisionado.setCaptionAsHtml(true);
	    btnNewComisionado.setCaption(FontAwesome.PLUS.getHtml() + " Agregar Comisionado" );
	    
	    
	    btnNewDestino.setCaptionAsHtml(true);
	    btnNewDestino.setCaption(FontAwesome.PLUS.getHtml() + " Agregar Destino" );
	    
	    btnGrabar.setStyleName("botonGrabarPlanificacion");
	    
	    
	    fecha.setValue(new Date());
	    fecha.setDateFormat("dd/MM/yyyy");
	    fecha.setResolution(Resolution.DAY);
	    fecha.setLenient(true);
	    
    	
	    fechaSalida.setDateFormat("dd/MM/yyyy HH:mm");
	    fechaSalida.setResolution(Resolution.MINUTE);
	    fechaSalida.setLenient(true);
	    
	    
	    fechaRegreso.setDateFormat("dd/MM/yyyy HH:mm");
	    fechaRegreso.setResolution(Resolution.MINUTE);
	    fechaRegreso.setLenient(true);
	    
	    
	    fechaAut.setDateFormat("dd/MM/yyyy");
	    txtFechaAutVehiculo.setDateFormat("dd/MM/yyyy");
	}

	
	private void cargarCombos(){
	   	
    	cmbArea.setContainerDataSource(act.getAllAreasContainer());
    	cmbArea.setItemCaptionPropertyId("nombre");
    	
    	
    	cmbPrograma.setContainerDataSource(prg.getAllProgramasContainer(0));
    	cmbPrograma.setItemCaptionPropertyId("nombre");
    	
    	
    	cmbSolicitante.setContainerDataSource(emp.getAllEmpleadosProgramasContainer(0));
    	cmbSolicitante.setItemCaptionPropertyId("descEmpleado");
    	

    	cmbChofer.setContainerDataSource(chof.getAllChoferesContainer());
    	cmbChofer.setItemCaptionPropertyId("descChofer");

    	
    	cmbMarca.setContainerDataSource(marca.getAllMarcasContainer());
    	cmbMarca.setItemCaptionPropertyId("nombre");
    	
    	
    	cmbModelo.setContainerDataSource(modelo.getAllModelosContainer(0));
    	cmbModelo.setItemCaptionPropertyId("nombre");
    	
    	
    	cmbDominio.setContainerDataSource(vehiculo.getAllVehiculosContainer(0,0));
    	cmbDominio.setItemCaptionPropertyId("dominio");
    	
		
	}
	
	
	private void setearValidaciones(){
		fecha.setRequired(true);
		fecha.setRequiredError("Campo Obligatorio");
		fecha.setValidationVisible(false);
    	
    	fechaSalida.setRequired(true);
    	fechaSalida.setRequiredError("Campo Obligatorio");
    	fechaSalida.setValidationVisible(false);
    	
    	fechaRegreso.setRequired(true);
    	fechaRegreso.setRequiredError("Campo Obligatorio");
    	fechaRegreso.setValidationVisible(false);
    	
    	cmbArea.setRequired(true);
    	cmbArea.setRequiredError("Campo Obligatorio");
    	cmbArea.setValidationVisible(false);
    	
    	cmbPrograma.setRequired(true);
    	cmbPrograma.setRequiredError("Campo Obligatorio");
    	cmbPrograma.setValidationVisible(false);
    	
    	cmbSolicitante.setRequired(true);
    	cmbSolicitante.setRequiredError("Campo Obligatorio");
    	cmbSolicitante.setValidationVisible(false);
    	
    	cmbChofer.setRequired(true);
    	cmbChofer.setRequiredError("Campo Obligatorio");
    	cmbChofer.setValidationVisible(false);
    	
    	cmbMarca.setRequired(true);
    	cmbMarca.setRequiredError("Campo Obligatorio");
    	cmbMarca.setValidationVisible(false);
    	
    	cmbModelo.setRequired(true);
    	cmbModelo.setRequiredError("Campo Obligatorio");
    	cmbModelo.setValidationVisible(false);
    	
    	cmbDominio.setRequired(true);
    	cmbDominio.setRequiredError("Campo Obligatorio");
    	cmbDominio.setValidationVisible(false);
    	
    	
    	txtCantComb.setRequired(true);
    	txtCantComb.setRequiredError("Campo Obligatorio");
    	txtCantComb.setConverter(new StringToFloatConverter());
    	txtCantComb.setConversionError("Solo se permite ingresar números");
    	txtCantComb.addValidator(new FloatRangeValidator("Solo números entre 0.01 y 1000.00 - {0} no es correcto", 0.01f, 1000.00f));
    	txtCantComb.setNullRepresentation("0.00");
    	txtCantComb.setValidationVisible(false);
    	
    	

	    txtCantKm.setRequired(true);
	    txtCantKm.setRequiredError("Campo Obligatorio");
	    txtCantKm.setConverter(new StringToFloatConverter());
	    txtCantKm.setConversionError("Solo se permite ingresar números");
	    txtCantKm.addValidator(new FloatRangeValidator("Solo números entre 0.01 y 10000.00 - {0} no es correcto", 0.01f, 100000.00f));
	    txtCantKm.setNullRepresentation("0.00");
	    txtCantKm.setImmediate(true);
	    txtCantKm.setValidationVisible(false);
//	    txtCantKm.setMaxLength(7);

	    txtObservacion.setNullRepresentation("");
//   	numCarnet.addValidator(new NullValidator("Must not be null", false));
//	    txtCantKm.addValidator(new FloatRangeValidator("Usar el punto como separador decimal",0.0f,5000.0f));
//	    txtCantKm.addValidator(new IntegerRangeValidator("Usar el punto como separador decimal",0,5000));
//    	txtCantKm.addValidator(new RegexpValidator("[1-9][0-9]*(\\.[0-9]{1,4}){0,1}", "Usar el punto como separador decimal"));
	    //RegexpValidator("[1-9][0-9]*(\\.[0-9]{1,2}){0,1}", "Libility must be a decimal up to two places precision")
	    
	    
	    
//    	txtNRes.setConverter(new StringToIntegerConverter());
//    	txtNRes.setConversionError("Solo se permiten n�meros enteros");
//    	txtNRes.addValidator(new IntegerRangeValidator("Solo se permiten n�meros enteros entre 1 y 9999999 - {0} no es correcto", 1, 9999999));
//    	txtNRes.setNullRepresentation("0");
//
//	
//    	txtSup.setConverter(new StringToFloatConverter());
//    	txtSup.setConversionError("Solo se permite ingresar n�meros");
//    	txtSup.addValidator(new FloatRangeValidator("Solo n�meros entre 0 y 10000.00 - {0} no es correcto", 0.00f, 100000.01f));
//    	txtSup.setNullRepresentation("0.00");

	
	}

	
	private void deshabilitarCampos(){
		
		
		
	}

	
	private void definirTamañoCampos(){
    	btnGenerar.setWidth(9.5f,Unit.EM);
    	btnReporte1.setWidth(9.5f,Unit.EM);
    	btnReporte2.setWidth(9.5f,Unit.EM);
    	btnReporte3.setWidth(9.5f,Unit.EM);
    	idExp.setWidth(9f, Unit.EM);
		txtEstado.setWidth("100.0%");	
		fecha.setWidth(9f, Unit.EM);
		cmbArea.setWidth("100.0%");	
		cmbPrograma.setWidth("100.0%");
		cmbSolicitante.setWidth("100.0%");
		fechaSalida.setWidth(12f, Unit.EM);
		fechaRegreso.setWidth(12f, Unit.EM);
		chkReqVehiculo.setWidth(4f, Unit.EM);
		pnlTblComisionados.setWidth("100%");
		pnlTblComisionados.setHeight(4f, Unit.CM);
		pnlTblDestinos.setWidth("100%");
		pnlTblDestinos.setHeight(4f, Unit.CM);
		txtMotivo.setWidth("100.0%");
		txtMotivo.setHeight(2.5f, Unit.CM);
		txtObsRech.setWidth("100.0%");
		txtObsRech.setHeight(2.5f, Unit.CM);
		fechaAut.setWidth(9f, Unit.EM);
		txtUserAut.setWidth("100%");
		
		cmbChofer.setWidth("100.0%");
    	cmbMarca.setWidth("100.0%");
    	cmbModelo.setWidth("100.0%");
    	cmbDominio.setWidth("100.0%");
    	txtCantKm.setWidth("100.0%");
    	txtCantComb.setWidth("100.0%");
    	txtImpEstTarj.setWidth("100.0%");
    	txtImpEstExceso.setWidth("100.0%");
    	txtObservacion.setWidth("100.0%");
    	txtFechaAutVehiculo.setWidth("100.0%");
    	txtUsrAutVehiculo.setWidth("100.0%");

		
	}

	
	private void cargarGrillas(){
		
		hl_botonesGral.setSpacing(true);
		Form_gridLayout0.addComponent(hl_botonesGral,0,0,5,0);
		
		vl_0.removeAllComponents();   
	    vl_0.addComponents(btnNewComisionado,pnlTblComisionados);
	    
	    vl_1.removeAllComponents();
	    vl_1.addComponents(btnNewDestino,pnlTblDestinos);
	    
		Form_gridLayout1.addComponent(idExp,0,0,0,0);
		Form_gridLayout1.addComponent(txtNExpediente,1,0,1,0);
		Form_gridLayout1.addComponent(txtEstado,3,0,5,0);
    	Form_gridLayout1.addComponent(fecha,8,0,8,0);
    	
    	Form_gridLayout1.addComponent(cmbArea,0,1,0,1);
    	Form_gridLayout1.addComponent(cmbPrograma,1,1,2,1);
      	Form_gridLayout1.addComponent(cmbSolicitante,3,1,5,1);
      	
    	Form_gridLayout1.addComponent(fechaSalida,6,1,6,1);
    	Form_gridLayout1.addComponent(fechaRegreso,7,1,7,1);
    	Form_gridLayout1.addComponent(chkReqVehiculo,8,1,8,1);
    	
    	Form_gridLayout1.addComponent(txtMotivo,0,2,4,3);
    	Form_gridLayout1.addComponent(txtObsRech,5,2,8,3);
    	
    	Form_gridLayout1.addComponent(vl_0,0,4,4,4);
    	Form_gridLayout1.addComponent(vl_1,5,4,8,4);
    	
    	Form_gridLayout1.addComponent(chkAut,0,5,0,5);
    	Form_gridLayout1.addComponent(fechaAut,1,5,1,5);
    	Form_gridLayout1.addComponent(txtUserAut,2,5,6,5);

    	
    	Form_gridLayout1.setComponentAlignment(fechaSalida, Alignment.MIDDLE_RIGHT);
    	Form_gridLayout1.setComponentAlignment(chkReqVehiculo, Alignment.MIDDLE_CENTER);
    	Form_gridLayout1.setComponentAlignment(chkAut, Alignment.MIDDLE_CENTER);

    	
    	Form_gridLayout4.addComponent(cmbChofer,0,0,4,0);
    	
		Form_gridLayout4.addComponent(cmbMarca,0,1,1,1);
    	Form_gridLayout4.addComponent(cmbModelo,2,1,3,1);
    	Form_gridLayout4.addComponent(cmbDominio,4,1,4,1);
    	
    	Form_gridLayout4.addComponent(txtCantKm,0,2,0,2);
    	Form_gridLayout4.addComponent(txtCantComb,3,2,3,2);
    	
      	Form_gridLayout4.addComponent(txtImpEstTarj,0,3,0,3);
      	Form_gridLayout4.addComponent(txtImpEstExceso,3,3,3,3);
    	
      	Form_gridLayout4.addComponent(txtObservacion,0,4,4,4);
    	
      	Form_gridLayout4.addComponent(txtFechaAutVehiculo,0,5,0,5);
      	Form_gridLayout4.addComponent(txtUsrAutVehiculo,2,5,4,5);
      	
	}
	
	
	private boolean validarCamposSolicitud(){
		try{
			fecha.setValidationVisible(true);
			fechaSalida.setValidationVisible(true);
			fechaRegreso.setValidationVisible(true);
			cmbArea.setValidationVisible(true);
			cmbPrograma.setValidationVisible(true);
			cmbSolicitante.setValidationVisible(true);

			fecha.validate();
			fechaSalida.validate();
			fechaRegreso.validate();
			cmbArea.validate();
			cmbPrograma.validate();
			cmbSolicitante.validate();

			
	
			return true;
			
		}catch(Exception e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
		}
		/*
		catch(NumberFormatException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}catch(Validator.InvalidValueException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}*/
		
	}
	
	
	private boolean validarCamposVehiculo(){
		try{
			cmbChofer.setValidationVisible(true);
			cmbMarca.setValidationVisible(true);
			cmbModelo.setValidationVisible(true);
			cmbDominio.setValidationVisible(true);
			txtCantComb.setValidationVisible(true);
			txtCantKm.setValidationVisible(true);
			
			cmbChofer.validate();
			cmbMarca.validate();
			cmbModelo.validate();
			cmbDominio.validate();
			txtCantComb.validate();
			txtCantKm.validate();
			
	
			return true;
			
		}catch(Exception e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
		}
		/*
		catch(NumberFormatException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}catch(Validator.InvalidValueException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}*/
		
	}
	
	
	
///////////////////////////////////////////////	
///////////////////////////////////////////////	
//Ventana VentanaComisionadosABM
	class VentanaComisionadosABM extends Window {
		
		
		public VentanaComisionadosABM(int idDetComisionados, Comisiones com) {
			super("Detalle Comisionados");
			center();
			
			setModal(true);
			this.setWidth(70, Unit.PERCENTAGE);
//			this.setHeight(50, Unit.PERCENTAGE);
			setResizable(false);
			
			VerticalLayout content = new VerticalLayout();
	        content.setMargin(true);
	        content.setSpacing(true);

	        NativeButton btnCierre= new NativeButton();

			
			btnCierre.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
					close();
					ini(String.valueOf(com.getId()),1);
				}
			});
				
			// int idReg, Comisiones com, NativeButton btnCierre, Usuarios usr
			 
			DetalleComisionadosForm vusuarios6=new DetalleComisionadosForm(usrLog, idDetComisionados, com, btnCierre);
			content.addComponents(vusuarios6);

			setContent(content);
		        
		}
		

	}
	
	
///////////////////////////////////////////////	
///////////////////////////////////////////////	
//Ventana VentanaDestinosABM
	class VentanaDestinosABM extends Window {
		private GridLayout grilla1;
		private VerticalLayout content;
		private VerticalLayout verticalLayout_1;
		
		TextField id = new TextField("Id");
		TextField idExpediente = new TextField("Id Exp.");
		
		ComboBox cmbProvincia  = new ComboBox("Provincia");
		ComboBox cmbLocalidad = new ComboBox("Localidad");

		
		
		DetalleDestinos per = new DetalleDestinos();
		DetalleDestinosDAO perDAO = new DetalleDestinosDAO();
		
		
		public VentanaDestinosABM(int idReg, int idExp, NativeButton btnCierre,Consumer<String> save) {
		super("Detalle Destinos");
		center();
		
		setModal(true);
		this.setWidth(40, Unit.PERCENTAGE);
//		this.setHeight(40, Unit.PERCENTAGE);
		setResizable(false);
		
		content = new VerticalLayout();
		content.setMargin(true);
		content.setSpacing(true);
		
		verticalLayout_1= new VerticalLayout();
		verticalLayout_1.setSpacing(true);
		
		
		
		grilla1 = new GridLayout(3,3);
		grilla1.setWidth("100.0%");
		grilla1.setColumnExpandRatio(0, 0);
		grilla1.setColumnExpandRatio(1, 0);
		grilla1.setColumnExpandRatio(2, 1f);

		
		
		NativeButton btnAgrega = new NativeButton("Graba");
		NativeButton btnModifica = new NativeButton("Modifica");
		NativeButton btnElimina = new NativeButton("Elimina");
		NativeButton btnCancela = new NativeButton("Cancela");    	    
		
		
		
		ProvinciasDAO act = new ProvinciasDAO();
    	cmbProvincia.setContainerDataSource(act.getAllProvinciasContainer());
    	cmbProvincia.setItemCaptionPropertyId("nombre");
    	cmbProvincia.setRequired(true);

    	
    	LocalidadesDAO prg = new LocalidadesDAO();
    	cmbLocalidad.setContainerDataSource(prg.getAllLocalidadesContainer(0));
    	cmbLocalidad.setItemCaptionPropertyId("nombre");
    	cmbLocalidad.setRequired(true);
    	
    	cmbLocalidad.setWidth("100.0%");
		
		grilla1.addComponent(id,0,0,0,0);
		grilla1.addComponent(idExpediente,1,0,1,0);
		grilla1.addComponent(cmbProvincia,0,1,0,1);
		grilla1.addComponent(cmbLocalidad,1,1,2,1);
		
		grilla1.setSpacing(true);
		
		
		
		id.setEnabled(false);
		idExpediente.setEnabled(false);
		
		
		id.setValue(String.valueOf(idReg));
		idExpediente.setValue(String.valueOf(idExp));
		
		
		
		
		
		
		if(id.isEmpty() || id.getValue().equals(null) || id.getValue().equals("")){
			id.setValue("0");
		}
		
		
		
		if (!id.getValue().equals("0")){
			try {
				per= perDAO.DevuelveDetalleDestinos(Integer.parseInt(id.getValue()), Integer.parseInt(idExpediente.getValue()));
				
				id.setValue(String.valueOf(per.getId()));
				idExpediente.setValue(String.valueOf(per.getIdComision()));
				
				cmbProvincia.setValue(per.getIdProvincia());
				int valorLocalidad=(int)per.getIdLocalidad();

				
				if (cmbProvincia.isEmpty()){
					cmbLocalidad.setContainerDataSource(prg.getAllLocalidadesContainer(0));
				} else {
					cmbLocalidad.setContainerDataSource(prg.getAllLocalidadesContainer((int)cmbProvincia.getValue()));
					cmbLocalidad.setValue(valorLocalidad);

					}
				

				HorizontalLayout hl_1= new HorizontalLayout(btnModifica,btnElimina,btnCancela);
				verticalLayout_1.addComponents(grilla1,hl_1);
				hl_1.setSpacing(true);

			} catch (NumberFormatException|SQLException e) {
				e.printStackTrace();
			} 
		
		} else {
			
			HorizontalLayout hl_1= new HorizontalLayout(btnAgrega,btnCancela);
			verticalLayout_1.addComponents(grilla1,hl_1);
			hl_1.setSpacing(true);
			
		}
		
		
		

		cmbProvincia.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 cmbLocalidad.setContainerDataSource(prg.getAllLocalidadesContainer((int)cmbProvincia.getValue()));
				 }
			 }
		});
		
		
		
		
		btnAgrega.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				if (!cmbProvincia.isEmpty() && !cmbLocalidad.isEmpty()) {
					try {
						if(perDAO.existe(Integer.parseInt(id.getValue()),Integer.parseInt(idExpediente.getValue()), (int)cmbLocalidad.getValue())>0){
							Notification.show("Ya se encuentra asignada la localidad." ,Notification.Type.ERROR_MESSAGE);
						} else {
							perDAO.agrega(Integer.parseInt(idExpediente.getValue()), (int)cmbLocalidad.getValue(), usrLog.getId());
							close();
							ini(idExpediente.getValue(),1);	
						}
					} catch (NumberFormatException|SQLException e) {
						e.printStackTrace();
					}
				}else{
					Notification.show("Hay campos obligatorios vacios",Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
				
		btnModifica.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				if (!cmbProvincia.isEmpty() && !cmbLocalidad.isEmpty())  {
					try {
						if(perDAO.existe(Integer.parseInt(id.getValue()),Integer.parseInt(idExpediente.getValue()), (int)cmbLocalidad.getValue())>0){
							Notification.show("Ya se encuentra asignada la localidad." ,Notification.Type.ERROR_MESSAGE);
						} else {
							perDAO.modifica(Integer.parseInt(id.getValue()), (int)cmbLocalidad.getValue(), usrLog.getId());
							close();
							ini(idExpediente.getValue(),1);
						}
					} catch (NumberFormatException|SQLException e) {
						e.printStackTrace();
					} 
				}else{
					Notification.show("Hay campos obligatorios vacios",Notification.Type.ERROR_MESSAGE);
				}
			}
		});
		
		
		btnElimina.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				perDAO.elimina(Integer.parseInt(id.getValue()),usrLog.getId()); 		
				close();
				ini(idExpediente.getValue(),1);
			}
		});
		
				
		btnCancela.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) { 		
				close();
			}
		});
		
		
		
		content.addComponents(verticalLayout_1);
		setContent(content);
		}
	
	
	}

	
//////////////////////////////////////////////
///////////////////////////////////////////////	
//Ventana VentanaDestinosABM
	class VentanaCalendario extends Window {
		private VerticalLayout content;
		private VerticalLayout verticalLayout_1;
		
		
		public VentanaCalendario(int idReg, int idExp, String tipoEvento, Date fechaSalida,NativeButton btnCierre,Consumer<String> save) {
			super("Calendario de " + tipoEvento);
			center();
			
			setModal(true);
			this.setWidth(90, Unit.PERCENTAGE);
			this.setHeight(90, Unit.PERCENTAGE);
			setResizable(false);
			
			content = new VerticalLayout();
			content.setMargin(true);
			content.setSpacing(true);
			
			verticalLayout_1= new VerticalLayout();
			verticalLayout_1.setSpacing(true);
			
			
			CalendarForm vusuarios9911 = new CalendarForm(tipoEvento, fechaSalida);
			verticalLayout_1.addComponent(vusuarios9911);
			content.addComponents(verticalLayout_1);
			setContent(content);
		}
	
	}


///////////////////////////////////////////////	
///////////////////////////////////////////////
	
	
	
	
	@AutoGenerated
	private void buildMainLayout() {	
		tabsheet_mainTabSheet = new TabSheet();
		tabsheet_mainTabSheet.setImmediate(false);
		tabsheet_mainTabSheet.setWidth("100.0%");
		tabsheet_mainTabSheet.setHeight("100.0%");
		tabsheet_mainTabSheet.setSizeFull();
		
		VerticalLayout Form_mainLayout_tab1 = new VerticalLayout();
		Form_mainLayout_tab1.addComponent(buildContenedorPanelTab1());
	 
		tabsheet_mainTabSheet.addTab(Form_mainLayout_tab1).setCaption("Datos Generales");
		
		
		VerticalLayout Form_mainLayout_tab2 = new VerticalLayout();
		Form_mainLayout_tab2.addComponent(buildContenedorPanelTab2());
		
		tabsheet_mainTabSheet.addTab(Form_mainLayout_tab2).setCaption("Datos Vehículo");
		

	//	return Form_mainLayout;	

	}
	

	private Panel buildContenedorPanelTab1() {
		Panel Form_contenedorPanel = new Panel();
		Form_contenedorPanel.setImmediate(false);
		Form_contenedorPanel.setWidth("100.0%");
		Form_contenedorPanel.setHeight("100.0%");
//		Form_contenedorPanel.setSizeFull();
		
		Panel Form_panel0 = new Panel();
		Panel Form_panel1 = new Panel();
//		Panel Form_panel2 = new Panel();

		
		Form_gridLayout0 = new GridLayout(6,1);
	    	Form_gridLayout0.setWidth("100.0%");
	    	Form_gridLayout0.setColumnExpandRatio(0, 0);
	    	Form_gridLayout0.setColumnExpandRatio(1, 0);
	    	Form_gridLayout0.setColumnExpandRatio(2, 0);
	    	Form_gridLayout0.setColumnExpandRatio(3, 0);
	    	Form_gridLayout0.setColumnExpandRatio(4, 0);
	    	Form_gridLayout0.setColumnExpandRatio(5, 1f);
	    	Form_gridLayout0.setSpacing(true);
    	
		Form_gridLayout1 = new GridLayout(9,8);
	    	Form_gridLayout1.setWidth("100.0%");
	    	Form_gridLayout1.setColumnExpandRatio(0, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(1, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(2, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(3, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(4, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(5, 1f);
	    	Form_gridLayout1.setColumnExpandRatio(6, 1f);
	    	Form_gridLayout1.setSpacing(true);


    	
    	
 //   	Form_gridLayout2 = new GridLayout(1,2);
 //   	Form_gridLayout2.setWidth("100.0%");
 //   	Form_gridLayout2.setHeight(170,Unit.PIXELS);
 //   	Form_gridLayout2.setRowExpandRatio(0, 0);
 //   	Form_gridLayout2.setRowExpandRatio(1, 1f);
    	
    		Form_panel0.setContent(Form_gridLayout0);
    		Form_panel1.setContent(Form_gridLayout1);
  //  	Form_panel2.setContent(Form_gridLayout2);

		// verticalLayout_1
    		VerticalLayout Form_verticalLayout_1 = new VerticalLayout();
		Form_verticalLayout_1.setImmediate(false);
		Form_verticalLayout_1.setWidth("100.0%");
		Form_verticalLayout_1.setHeight("100.0%");
		Form_verticalLayout_1.setMargin(true);
		Form_verticalLayout_1.addComponents(Form_panel0,Form_panel1);
		Form_verticalLayout_1.setSpacing(true);
		
		Form_contenedorPanel.setContent(Form_verticalLayout_1);
		
		return Form_contenedorPanel;
		
	// grilla >> panel >> verticalLayout >> panel	
	}


	private Panel buildContenedorPanelTab2() {
		Panel Form_contenedorPanel = new Panel();
		Form_contenedorPanel.setImmediate(false);
		Form_contenedorPanel.setWidth("100.0%");
		Form_contenedorPanel.setHeight("100.0%");
//		Form_contenedorPanel.setSizeFull();
		
		Panel Form_panel0 = new Panel();
		Panel Form_panel1 = new Panel();
//		Panel Form_panel2 = new Panel();

		
		Form_gridLayout3 = new GridLayout(6,1);
	    	Form_gridLayout3.setWidth("100.0%");
	    	Form_gridLayout3.setColumnExpandRatio(0, 0);
	    	Form_gridLayout3.setColumnExpandRatio(1, 0);
	    	Form_gridLayout3.setColumnExpandRatio(2, 0);
	    	Form_gridLayout3.setColumnExpandRatio(3, 0);
	    	Form_gridLayout3.setColumnExpandRatio(4, 0);
	    	Form_gridLayout3.setColumnExpandRatio(5, 1f);
	    	Form_gridLayout3.setSpacing(true);
    	
		Form_gridLayout4 = new GridLayout(9,8);
	    	Form_gridLayout4.setWidth("100.0%");
	    	Form_gridLayout4.setColumnExpandRatio(0, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(1, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(2, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(3, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(4, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(5, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(6, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(7, 1f);
	    	Form_gridLayout4.setColumnExpandRatio(8, 1f);
	    	Form_gridLayout4.setSpacing(true);
	    	Form_gridLayout4.setMargin(false);

    	
    		Form_panel0.setContent(Form_gridLayout3);
    		Form_panel1.setContent(Form_gridLayout4);


		// verticalLayout_1
    		VerticalLayout Form_verticalLayout_1 = new VerticalLayout();
		Form_verticalLayout_1.setImmediate(false);
		Form_verticalLayout_1.setWidth("100.0%");
		Form_verticalLayout_1.setHeight("100.0%");
		Form_verticalLayout_1.setMargin(true);
		Form_verticalLayout_1.addComponents(Form_panel0,Form_panel1);
		Form_verticalLayout_1.setSpacing(true);
		
		Form_contenedorPanel.setContent(Form_verticalLayout_1);
		
		return Form_contenedorPanel;
		
	// grilla >> panel >> verticalLayout >> panel	
	}



}

package sec.comisiones.vistas;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

import org.vaadin.dialogs.ConfirmDialog;

import sec.comisiones.dao.AreasDAO;
import sec.comisiones.dao.BancosDAO;
import sec.comisiones.dao.CategoriasDAO;
import sec.comisiones.dao.ChoferesDAO;
import sec.comisiones.dao.ComisionesDAO;
import sec.comisiones.dao.DetalleComisionadosDAO;
import sec.comisiones.dao.DetalleDestinosDAO;
import sec.comisiones.dao.DetalleGastosComisionadosDAO;
import sec.comisiones.dao.EmpleadosDAO;
import sec.comisiones.dao.EmpleadosPorProgramaDAO;
import sec.comisiones.dao.ProgramasDAO;
import sec.comisiones.dao.RendicionesDAO;
import sec.comisiones.manager.DetalleComisionadosManager;
import sec.comisiones.manager.DetalleDestinosManager;
import sec.comisiones.manager.DetalleGastosComisionadosManager;
import sec.comisiones.mapeos.Comisiones;
import sec.comisiones.mapeos.DetalleComisionados;
import sec.comisiones.mapeos.DetalleGastosComisionados;
import sec.comisiones.mapeos.EmpleadosPorPrograma;
import sec.comisiones.mapeos.Rendiciones;
import sec.comisiones.mapeos.Usuarios;

import com.agpro.controles.Formateos;
import com.agpro.controles.ReportManagerAbstract;
import com.agpro.controles.Validaciones;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.converter.StringToFloatConverter;
import com.vaadin.data.util.converter.StringToIntegerConverter;
import com.vaadin.data.validator.FloatRangeValidator;
import com.vaadin.data.validator.IntegerRangeValidator;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Sizeable.Unit;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification.Type;



public class RendicionComisionesForm extends CustomComponent  {

	private static final long serialVersionUID = 6948818428627483794L;
	private VerticalLayout Form_mainLayout;
	private Panel contenedorPanel;
	private GridLayout Form_gridLayout0; 
	private GridLayout Form_gridLayout1;
	private GridLayout Form_gridLayout2;

	private HorizontalLayout hl_botonesGral = new HorizontalLayout();
	private HorizontalLayout hl_gastos=new HorizontalLayout();
	private HorizontalLayout hl_fechas=new HorizontalLayout();
	private HorizontalLayout hl_importes=new HorizontalLayout();
	private HorizontalLayout hl_saldos=new HorizontalLayout();
	private HorizontalLayout hl_banco=new HorizontalLayout();
	

    private VerticalLayout vl_1 = new VerticalLayout();
    private VerticalLayout vl_gastos=new VerticalLayout();

	private Table tblDestinos;
	private Table tblDetalleGastos;
	

	private DetalleDestinosManager detDestinosMng = new DetalleDestinosManager();
	private DetalleGastosComisionadosManager tblDetGastosComisionadoMng = new DetalleGastosComisionadosManager();
	
	FloatRangeValidator val=new FloatRangeValidator("Solo números entre 0.01 y 10000.00 - {0} no es correcto", 0.01f, 100000.01f);
	
	Usuarios usrLogObj = new Usuarios();
	Comisiones comObj = new Comisiones();
	DetalleGastosComisionados detGastosObj = new DetalleGastosComisionados();
	Rendiciones rendObj = new Rendiciones();
	
	ComisionesDAO comDAO = new ComisionesDAO();
	DetalleComisionadosDAO detComDAO = new DetalleComisionadosDAO();
	DetalleDestinosDAO detDestDAO = new DetalleDestinosDAO();
	AreasDAO areaDAO = new AreasDAO();
	ProgramasDAO progDAO = new ProgramasDAO();
	EmpleadosDAO empDAO = new EmpleadosDAO();
	DetalleGastosComisionadosDAO detGastosDAO = new DetalleGastosComisionadosDAO();
	BancosDAO bancoDAO = new BancosDAO();
	RendicionesDAO rendDAO = new RendicionesDAO();
	
	
	private TextField txtIdRend = new TextField("Nº Rendición");
	private TextField txtIdComision = new TextField("Nº Comisión");
	private TextField txtNExpediente = new TextField("Nº Expediente");
	private TextField txtDuracion = new TextField("Duración");
	private TextField txtAnticipo = new TextField("$ Anticipo");
	private TextField txtViatico = new TextField("$ Viaticos");
	private TextField txtGasto = new TextField("$ Gastos");
	private TextField txtTotGasto = new TextField("$ Total Gastos");
	private TextField txtMontoSaldo = new TextField("$ Monto");
	private TextField txtSaldoFavor = new TextField("Saldo a Favor de:");
	private TextField txtNDeposito = new TextField("Nº Deposito");
	private TextField txtNCuenta = new TextField("Nº Cuenta");
	private TextField txtIdGasto = new TextField("id Gasto");
	private TextField txtConcepto = new TextField("Concepto");
	private TextField txtImporte = new TextField("$ Importe");
	
	private DateField txtfecha = new DateField("Fecha");
	private DateField txtFechaGasto = new DateField("Fecha Gasto");
	private DateField txtfechaSalida = new DateField("Fecha/Hora Salida");
	private DateField txtfechaRegreso = new DateField("Fecha/Hora Regreso");

	private Label lblDestino = new Label("Destino");
	private Label lblDetGastos = new Label("Carga Detalle Comprobantes de Gastos Rendidos");
	
	
	private ComboBox cmbArea = new ComboBox("Area");
	private ComboBox cmbPrograma = new ComboBox("Programa");
	private ComboBox cmbComisionados = new ComboBox("Comisionados");
	private ComboBox cmbBanco = new ComboBox("Bancos");
	
	private Panel pnlTblDestinos = new Panel();
	private Panel pnlTblDetalleGastos = new Panel();

	private NativeButton btnGrabar = new NativeButton("Grabar");
	private NativeButton btnModificar = new NativeButton("Modificar");
	private NativeButton btnCancelar = new NativeButton("Cancelar");
	private NativeButton btnReporte1 = new NativeButton("Rpt Autorización");
	private NativeButton btnCierre = new NativeButton("Salir");
	private NativeButton btnAgregaGasto = new NativeButton("");
	private NativeButton btnEliminaGasto = new NativeButton("");
	private NativeButton btnModificaFecha = new NativeButton("");
	


	
	String id = "";
	String idCom = "";
	String flag = "";
	int bandera=0;
	int idEstado=0;
	float duracion=0;
	
	SimpleDateFormat dateFormatLargo= new SimpleDateFormat("dd/MM/yyyy HH:mm");
	SimpleDateFormat dateFormatCorto= new SimpleDateFormat("dd/MM/yyyy");
	DecimalFormat df = new DecimalFormat("##,##0.00");
	
	
	
	
	public RendicionComisionesForm() {
		ini(id,idCom, bandera);  
	}
	
	public RendicionComisionesForm(Usuarios usr) {
		usrLogObj= usr;
		ini(id,idCom, bandera);   
	}
	
	public RendicionComisionesForm(Usuarios usr, String idPlanif) {
		usrLogObj= usr;
		this.id=idPlanif;
		ini(id,idCom, bandera);  
	}

	public RendicionComisionesForm(Usuarios usr, String idRend, String idComision, String flag, NativeButton btnCierre) {
		usrLogObj= usr;
		this.idCom = idComision;
		this.id=idRend;
		this.flag=flag;
		this.btnCierre=btnCierre;
		ini(id, idCom, bandera);   
	}
	
	
	
	///////////////////////////////////////////////	
	///////////////////////////////////////////////	
	
	private void ini(String idRendicion, String idCom, int bandera){
		buildMainLayout();
		setCompositionRoot(Form_mainLayout);
    
	    
		btnGrabar = new NativeButton("Grabar");
		btnModificar = new NativeButton("Modificar");
		btnCancelar = new NativeButton("Cancelar");
		btnReporte1 = new NativeButton("Reporte");
		btnAgregaGasto = new NativeButton("Agregar");
		btnEliminaGasto = new NativeButton("Eliminar");
		btnModificaFecha = new NativeButton("Modificar Fecha");

		
		comObj = new Comisiones();
	    try {
			comObj = comDAO.DevuelveComision(Integer.parseInt(idCom));
		}catch (NumberFormatException|SQLException e) {
			Notification.show("Error",e.getMessage(),Type.ERROR_MESSAGE);
			e.printStackTrace();
		}
	    
	    
		txtIdComision.setValue(String.valueOf(comObj.getId()));
	    txtIdRend.setValue(idRendicion);
	    txtNExpediente.setValue(comObj.getnExpediente());

	    
	    tblDestinos = detDestinosMng.cargaTabla(Integer.parseInt(txtIdComision.getValue()));
	    pnlTblDestinos.setContent(tblDestinos);

	    cargaTablaGastos(Integer.parseInt(txtIdComision.getValue()),0);
	    

	    if (bandera!=1){
	    	setearFormatoComponentes();

	    	setearValidaciones();	
	    }
	    
	    definirTamañoCampos();
	    
	    cargarCombos();
	    
	    deshabilitarCampos();

	    cargarGrillas();
		
		
		
		
		
		cmbArea.setValue(comObj.getIdArea());
		cmbPrograma.setValue(comObj.getIdPrograma());
		txtfechaSalida.setValue(comObj.getFechaSalida());
		txtfechaRegreso.setValue(comObj.getFechaRegreso());
		txtDuracion.setValue(df.format(comObj.getDuracion()));
		cmbBanco.setValue(1);
		txtAnticipo.setValue("0,0");
		txtViatico.setValue("0,0");
		txtGasto.setValue("0,0");

		
		accionBotones();
	   
		

		
		

		
	
       
		
		cmbComisionados.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 Object selectedItemId = event.getProperty().getValue();
				 if (selectedItemId != null) {
					 try {
						 
						 int idEmp1=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idEmpleado").getValue();
						
						 if (rendDAO.existe(Integer.parseInt(txtIdComision.getValue()), idEmp1)>0) {
							rendObj = rendDAO.DevuelveRendicion(Integer.parseInt(txtIdComision.getValue()),idEmp1);
							txtIdRend.setValue(String.valueOf(rendObj.getId()));
							txtNExpediente.setValue(rendObj.getnExpediente());
							txtfecha.setValue(rendObj.getFecha());
							txtfechaSalida.setValue(rendObj.getFechaHoraSalida());
							txtfechaRegreso.setValue(rendObj.getFechaHoraRegreso());
							txtDuracion.setValue(df.format(rendObj.getDuracion()));
							txtAnticipo.setValue(df.format(rendObj.getAnticipo()));
							txtViatico.setValue(df.format(rendObj.getViaticos()));
							txtGasto.setValue(df.format(rendObj.getGastos()));
							txtTotGasto.setValue(df.format(rendObj.getGastosTotal()));
							txtMontoSaldo.setValue(df.format(rendObj.getSaldo()));
							txtSaldoFavor.setValue(rendObj.getaFavorDe());
							cmbBanco.setValue(rendObj.getIdBanco());
							txtNCuenta.setValue(rendObj.getnCuenta());
							txtNDeposito.setValue(rendObj.getnDeposito());

						 } else {
							txtIdRend.setValue("0");
						//	txtNExpediente.setValue("");
							txtfecha.setValue(new Date());

							txtNCuenta.setValue("");
							txtNDeposito.setValue("");
							
							cmbArea.setValue(comObj.getIdArea());
							cmbPrograma.setValue(comObj.getIdPrograma());
							txtfechaSalida.setValue(comObj.getFechaSalida());
							txtfechaRegreso.setValue(comObj.getFechaRegreso());
							txtDuracion.setValue(df.format(comObj.getDuracion()));
							cmbBanco.setValue(1);
							txtAnticipo.setValue("0,0");
							txtViatico.setValue("0,0");
							txtGasto.setValue("0,0");
							txtSaldoFavor.setValue("");

							 
							
						 }

						 if (txtfechaSalida.getValue().before(txtfechaRegreso.getValue())){
							DetalleComisionados dc = new DetalleComisionados();
							EmpleadosPorProgramaDAO emp = new EmpleadosPorProgramaDAO();
							CategoriasDAO cat = new CategoriasDAO();
							
							int idProg1=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idPrograma").getValue();
							
							int idCat = emp.getEmpleadoDeProgramaContainer(emp.getIdEmpleadoPorPrograma(idProg1, idEmp1)).getIdCategoria();
							
							float monto = cat.DevuelveCategoria(idCat).getMontoProvincial();
							float viatico = dc.calculoViaticos(monto, Float.parseFloat(txtDuracion.getValue().replace(".", "").replace(",", ".")));
							txtViatico.setValue(df.format(viatico));
							
							cargaTablaGastos(Integer.parseInt(txtIdComision.getValue()),idEmp1);

						} else {
							Notification.show("La Fecha/Hora de regreso debe ser posterior a la de salida.",Notification.Type.ERROR_MESSAGE);
						} 
						 
					} catch (Exception e) {
						Notification.show("No se pudo obtener la rendición seleccionada, comuniquese con el administrador del sistema",e.getMessage(),Type.HUMANIZED_MESSAGE);
						e.printStackTrace();
					} finally{
						accionBotones();
					}
					
					 
				 } else {
					 cargaTablaGastos(Integer.parseInt(txtIdComision.getValue()),0);
					 txtIdRend.setValue("0");
					 txtAnticipo.setValue("0.0");
					 txtViatico.setValue("0.0");
					 txtGasto.setValue("0.0");
					 txtSaldoFavor.setValue("");
					 txtNCuenta.setValue("");
					 txtNDeposito.setValue("");
				//	 txtNExpediente.setValue("");
				 }
				 limpiaValidaciones();
				 accionBotones();
			 }	
		});
		
		
		txtAnticipo.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
				 if(!validaTxtAnticipo()){
					 Notification.show("Existen errores de validación en el campo Anticipo",Type.ERROR_MESSAGE);
				 } else{
					 limpiaValidaciones();
					 calculoSaldos();
				 }
			 }	
		});

		
		txtGasto.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
					 calculoSaldos();
			 }	
		});
		
		
		txtViatico.addValueChangeListener(new ValueChangeListener() {
			 public void valueChange(ValueChangeEvent event) {
					 calculoSaldos();
			 }	
		});
		
		
		btnModificaFecha.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				int idEmp=0;
				int idProg=0;
				if (!cmbComisionados.isEmpty()){
					idEmp=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idEmpleado").getValue();
					idProg=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idPrograma").getValue();	
				}
				
				UI.getCurrent().addWindow(new VentanaModificaFechas(idEmp,idProg,txtfechaSalida.getValue(),txtfechaRegreso.getValue(), (newValue)  -> {
					if(newValue.getFlag()==1){
						txtfechaSalida.setValue(newValue.getFecSalida());
						txtfechaRegreso.setValue(newValue.getFecRegreso());
						txtDuracion.setValue(df.format(newValue.getDuracion()));
						txtViatico.setValue(df.format(newValue.getViatico()));
					}
				})); 
			}});

		
		btnAgregaGasto.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				try{	
					if (!validarCamposGastos()) {
						Notification.show("Existen errores de validación","Revisar campos resaltados en rojo.",Type.ERROR_MESSAGE);
					} else {
						int idEmp=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idEmpleado").getValue();
						detGastosObj = new DetalleGastosComisionados();
						detGastosObj.setIdComision(Integer.parseInt(txtIdComision.getValue()));
						detGastosObj.setIdComisionado(idEmp);
						detGastosObj.setFecha(txtFechaGasto.getValue());
						detGastosObj.setConcepto(txtConcepto.getValue());
						detGastosObj.setImporte(Float.parseFloat(txtImporte.getValue().replace(".", "").replace(",", ".")));
						
						detGastosDAO.agrega(detGastosObj, usrLogObj.getId());
											
						cargaTablaGastos(Integer.parseInt(txtIdComision.getValue()),idEmp);
						limpiaValidaciones();
					}	

		    	}catch(Exception e){
		    		Notification.show("Error ","No se pudo agregar el gasto. " + e.getMessage(),Notification.Type.ERROR_MESSAGE);
				}
				
			}
		});
		
		
		btnEliminaGasto.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				try{	
					int idEmp=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idEmpleado").getValue();
					
					detGastosDAO.elimina(Integer.parseInt(txtIdGasto.getValue()), usrLogObj.getId());
							
					cargaTablaGastos(Integer.parseInt(txtIdComision.getValue()),idEmp);
					
					
					
		    	}catch(Exception e){
		    		Notification.show("Error al eliminar el gasto.", e.getMessage(),Notification.Type.ERROR_MESSAGE);
				}
				
			}
		});
	
	
		btnGrabar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
	
				if (!validarCamposRendicion()){
					Notification.show("Existen errores de validación","Revisar campos resaltados en rojo.",Type.ERROR_MESSAGE);
				} else {
						ConfirmDialog.show(getUI(), "Confirmar", "¿Desea guardar la rendición?","Sí", "No", new ConfirmDialog.Listener() {
							public void onClose(ConfirmDialog dialog) {
							          if (dialog.isConfirmed()) {
							               // C�digo S�
											try {
												int idEmp=(int) cmbComisionados.getItem((int)cmbComisionados.getValue()).getItemProperty("idEmpleado").getValue();
												rendObj.setId(Integer.parseInt(txtIdRend.getValue()));
												rendObj.setIdComision(Integer.parseInt(txtIdComision.getValue()));
												rendObj.setIdComisionado(idEmp);
												rendObj.setnExpediente(txtNExpediente.getValue());
												rendObj.setFecha(txtfecha.getValue());
												rendObj.setFechaHoraSalida(txtfechaSalida.getValue());
												rendObj.setFechaHoraRegreso(txtfechaRegreso.getValue());
												rendObj.setDuracion(Float.parseFloat(txtDuracion.getValue().replace(".", "").replace(",", ".")));
												rendObj.setAnticipo(Float.parseFloat(txtAnticipo.getValue().replace(".", "").replace(",", ".")));
												rendObj.setViaticos(Float.parseFloat(txtViatico.getValue().replace(".", "").replace(",", ".")));
												rendObj.setGastos(Float.parseFloat(txtGasto.getValue().replace(".", "").replace(",", ".")));
												rendObj.setGastosTotal(Float.parseFloat(txtTotGasto.getValue().replace(".", "").replace(",", ".")));
												rendObj.setSaldo(Float.parseFloat(txtMontoSaldo.getValue().replace(".", "").replace(",", ".")));
												rendObj.setaFavorDe(txtSaldoFavor.getValue());
												rendObj.setIdBanco((int)cmbBanco.getValue());
												rendObj.setnCuenta(txtNCuenta.getValue());
												rendObj.setnDeposito(txtNDeposito.getValue());

											//	Notification.show("Fecha: ",rendObj.getFecha() +"///"+rendObj.getFechaHoraSalida(),Type.ERROR_MESSAGE);
												
												if(txtIdRend.getValue()=="0"){
													rendDAO.agrega(rendObj, usrLogObj.getId());
													ini(String.valueOf(rendDAO.getUltimoId()),txtIdComision.getValue(),1);
													
												} else {
													rendDAO.modifica(rendObj,usrLogObj.getId());
													ini(txtIdRend.getValue(),txtIdComision.getValue(),1);
													
												}
											} catch (Exception e) {
												e.printStackTrace();
												Notification.show("Error al intentar grabar el registro",e.getMessage(),Notification.Type.ERROR_MESSAGE);
											}
							          } else {}
							}    
						});

				}
					
				}
			});
	
		
		btnModificar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnCancelar);
				btnGrabar.setEnabled(false);
				btnModificar.setEnabled(true);
				btnCancelar.setEnabled(true);
				
				btnModificar.setEnabled(false);
				btnGrabar.setEnabled(true);
				btnCancelar.setEnabled(true);
				habilitarCamposCarga();
				cmbComisionados.setEnabled(false);
			}
		});
	
		
		btnCancelar.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				accionBotones();
				ini(txtIdRend.getValue(),txtIdComision.getValue(),1);
			
			}
		});
	
				
		btnReporte1.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				Map<String, Object> parametro= new HashMap<String, Object>();
				String criterio = " ";
				criterio=criterio + "AND r.id="+txtIdRend.getValue();
				parametro.put("filtro",criterio);
				ReportManagerAbstract.VerReporte("ComisionesRendicionViaticos.jasper", parametro);
			}
		});


	
		
	}
	
	
	private void accionBotones(){
		if (txtIdRend.getValue()=="0") {
			if (flag=="carga"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnCancelar);
				btnGrabar.setEnabled(true);
				btnModificar.setEnabled(false);
				btnCancelar.setEnabled(false);
				habilitarCamposCarga();
			}
    	} else if (txtIdRend.getValue()!="0") {
    		deshabilitarCampos();
    		cmbComisionados.setEnabled(true);
			if (flag=="carga"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnGrabar,btnModificar,btnCancelar,btnReporte1);
				btnGrabar.setEnabled(false);
				btnModificar.setEnabled(true);
				btnCancelar.setEnabled(true);
				btnReporte1.setEnabled(true);
					
			} else if (flag=="cns"){
				hl_botonesGral.removeAllComponents();
				hl_botonesGral.addComponents(btnReporte1);
			}	
			
		}
		
	}
	
	
	private void cargaTablaGastos(int idComision, int idComisionado){
		tblDetalleGastos = tblDetGastosComisionadoMng.cargaTabla(idComision,idComisionado);
		pnlTblDetalleGastos.setContent(tblDetalleGastos);
		
		calculoTotalGasto(idComision,idComisionado);
		
		limpiaCamposGastos();
		
		
		tblDetalleGastos.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
			    	txtIdGasto.setValue(String.valueOf(tblDetalleGastos.getItem(selectedItemId).getItemProperty("id").getValue()));
			    	txtFechaGasto.setValue((Date) tblDetalleGastos.getItem(selectedItemId).getItemProperty("fecha").getValue());
			    	txtConcepto.setValue(String.valueOf(tblDetalleGastos.getItem(selectedItemId).getItemProperty("concepto").getValue()));
			    	txtImporte.setValue(df.format(tblDetalleGastos.getItem(selectedItemId).getItemProperty("importe").getValue()));

			    	hl_gastos.removeComponent(btnAgregaGasto);
			    	hl_gastos.addComponent(btnEliminaGasto);
			    	hl_gastos.setComponentAlignment(btnEliminaGasto, Alignment.BOTTOM_LEFT);
			    } else {
			    	limpiaCamposGastos();
			    		
			    }
		    }
		});
		
		
	}
	
	
	private void calculoTotalGasto(int idComision, int idEmp) {	
		DetalleGastosComisionadosDAO gastosDAO = new DetalleGastosComisionadosDAO();
		txtGasto.setValue(df.format(gastosDAO.totalDetalleGastosComisionados(idComision, idEmp)));
	
	}
	
	
	private void calculoSaldos(){
		try {
			 if (txtAnticipo.isEmpty()){txtAnticipo.setValue("0.0");}
			 if (txtGasto.isEmpty()){txtGasto.setValue("0.0");}
			 if (txtViatico.isEmpty()){txtGasto.setValue("0.0");}
			 
			 float total=Float.parseFloat(txtViatico.getValue().replace(".", "").replace(",", "."))+Float.parseFloat(txtGasto.getValue().replace(".", "").replace(",", "."));
			 txtTotGasto.setValue(df.format(total));

			 float saldo= Float.parseFloat(txtAnticipo.getValue().replace(".", "").replace(",", "."))-total;
			 if (saldo<0){
				 saldo=saldo*-1;	 
				 txtSaldoFavor.setValue("Comisionado");
			} else {
				 txtSaldoFavor.setValue("Ministerio");
			}
			 txtMontoSaldo.setValue(df.format(saldo));

		 } catch (Exception e) {
			 e.printStackTrace();
		 }
	}

	
	private void setearFormatoComponentes(){

		hl_botonesGral.setSpacing(true);
		hl_gastos.setSpacing(true);
	    hl_fechas.setSpacing(true);
	    hl_importes.setSpacing(true);
	    hl_saldos.setSpacing(true);
	    hl_banco.setSpacing(true);
	    
	    btnGrabar.setStyleName("botonGrabarPlanificacion");
	    
	    
	    txtfecha.setValue(new Date());
	    txtfecha.setDateFormat("dd/MM/yyyy");
	    txtfecha.setResolution(Resolution.DAY);
	    txtfecha.setLenient(true);
	    
	    txtFechaGasto.setDateFormat("dd/MM/yyyy");
	    txtFechaGasto.setResolution(Resolution.DAY);
	    txtFechaGasto.setLenient(true);
    	
	    txtfechaSalida.setDateFormat("dd/MM/yyyy HH:mm");
	    txtfechaSalida.setResolution(Resolution.MINUTE);
	    txtfechaSalida.setLenient(true);
	    
	    
	    txtfechaRegreso.setDateFormat("dd/MM/yyyy HH:mm");
	    txtfechaRegreso.setResolution(Resolution.MINUTE);
	    txtfechaRegreso.setLenient(true);
	    
	    


	}

	
	private void limpiaCamposGastos(){
		txtIdGasto.setValue("0");
		txtFechaGasto.setValue(null);
		txtConcepto.setValue("");
		txtImporte.setValue("0.00");
		
		hl_gastos.removeAllComponents();
		hl_gastos.addComponents(txtFechaGasto,txtConcepto,txtImporte,btnAgregaGasto);
	    hl_gastos.setComponentAlignment(btnAgregaGasto, Alignment.BOTTOM_LEFT);

	}
	
	
	private void cargarCombos(){
	   	
    	cmbArea.setContainerDataSource(areaDAO.getAllAreasContainer());
    	cmbArea.setItemCaptionPropertyId("nombre");
    	
    	
    	cmbPrograma.setContainerDataSource(progDAO.getAllProgramasContainer());
    	cmbPrograma.setItemCaptionPropertyId("nombre");
    	
    	
    	cmbComisionados.setContainerDataSource(detComDAO.getAllDetalleComisionadosContainer(Integer.parseInt(txtIdComision.getValue())));
    	cmbComisionados.setItemCaptionPropertyId("descPersonal");
    	
    	cmbBanco.setContainerDataSource(bancoDAO.getAllBancosContainer());
    	cmbBanco.setItemCaptionPropertyId("nombre");
    	
    	
		
	}
	
	
	private void setearValidaciones(){
		txtfecha.setRequired(true);
		txtfecha.setRequiredError("Campo Obligatorio");
		txtfecha.setValidationVisible(false);
    	
		txtFechaGasto.setRequired(true);
		txtFechaGasto.setRequiredError("Campo Obligatorio");
		txtFechaGasto.setValidationVisible(false);
    	
 	
    	cmbComisionados.setRequired(true);
    	cmbComisionados.setRequiredError("Campo Obligatorio");
    	cmbComisionados.setValidationVisible(false);
 
    	txtConcepto.setRequired(true);
    	txtConcepto.setRequiredError("Campo Obligatorio");
    	txtConcepto.setValidationVisible(false);
	    
//   	numCarnet.addValidator(new NullValidator("Must not be null", false));
//	    txtCantKm.addValidator(new FloatRangeValidator("Usar el punto como separador decimal",0.0f,5000.0f));
//	    txtCantKm.addValidator(new IntegerRangeValidator("Usar el punto como separador decimal",0,5000));
//    	txtCantKm.addValidator(new RegexpValidator("[1-9][0-9]*(\\.[0-9]{1,4}){0,1}", "Usar el punto como separador decimal"));
	    //RegexpValidator("[1-9][0-9]*(\\.[0-9]{1,2}){0,1}", "Libility must be a decimal up to two places precision")
	    
	    
	    
    	txtIdComision.setConverter(new StringToIntegerConverter());
    	txtIdComision.setConversionError("Solo se permiten números enteros");
    	txtIdComision.addValidator(new IntegerRangeValidator("Solo se permiten números enteros entre 1 y 9999999 - {0} no es correcto", 1, 9999999));
    	txtIdComision.setNullRepresentation("0");
    	txtIdComision.setValidationVisible(false);
	
    	
    	txtAnticipo.setConverter(new StringToFloatConverter());
    	txtAnticipo.setConversionError("Solo se permite ingresar números");
    	txtAnticipo.addValidator(new FloatRangeValidator("Solo números entre 0 y 10000.00 - {0} no es correcto", 0.00f, 100000.01f));
    	txtAnticipo.setNullRepresentation("0,00");
    	txtAnticipo.setValidationVisible(false);
    	

    	txtImporte.setConverter(new StringToFloatConverter());
    	txtImporte.setConversionError("Solo se permite ingresar números");
    	txtImporte.addValidator(new FloatRangeValidator("Solo números entre 0.01 y 10000.00 - {0} no es correcto", 0.01f, 100000.01f));
    	txtImporte.setNullRepresentation("0,00");
    	txtImporte.setValidationVisible(false);
    	
	}

	
	private void limpiaValidaciones(){
		txtfecha.setValidationVisible(false);
		txtIdComision.setValidationVisible(false);
		cmbComisionados.setValidationVisible(false);
		txtFechaGasto.setValidationVisible(false);
		txtConcepto.setValidationVisible(false);
		txtImporte.setValidationVisible(false);
		txtAnticipo.setValidationVisible(false);
	}
	
	
	private void deshabilitarCampos(){
		
		txtIdRend.setEnabled(false);
		txtIdComision.setEnabled(false);
		txtNExpediente.setEnabled(false);
		txtfecha.setEnabled(false);
		
		txtIdGasto.setEnabled(false);
		txtFechaGasto.setEnabled(false);
		txtConcepto.setEnabled(false);
		txtImporte.setEnabled(false);

		cmbArea.setEnabled(false);
		cmbPrograma.setEnabled(false);
		cmbComisionados.setEnabled(false);
		txtfechaRegreso.setEnabled(false);
		txtfechaSalida.setEnabled(false);
		txtDuracion.setEnabled(false);
		
		txtAnticipo.setEnabled(false);
		txtViatico.setEnabled(false);
		txtTotGasto.setEnabled(false);
		txtSaldoFavor.setEnabled(false);
		txtMontoSaldo.setEnabled(false);
		txtGasto.setEnabled(false);

		cmbBanco.setEnabled(false);
		txtNCuenta.setEnabled(false);
		txtNDeposito.setEnabled(false);
		
		tblDestinos.setSelectable(false);
		tblDetalleGastos.setSelectable(false);
		
		btnModificaFecha.setEnabled(false);
		btnAgregaGasto.setEnabled(false);
	}

	
	private void habilitarCamposCarga(){
		txtfecha.setEnabled(true);
		txtFechaGasto.setEnabled(true);
		txtConcepto.setEnabled(true);
		txtImporte.setEnabled(true);
		cmbComisionados.setEnabled(true);
		txtAnticipo.setEnabled(true);
		txtNCuenta.setEnabled(true);
		txtNDeposito.setEnabled(true);
		tblDetalleGastos.setSelectable(true);
		
		btnModificaFecha.setEnabled(true);
		btnAgregaGasto.setEnabled(true);
	}
	
	
	private void definirTamañoCampos(){
    	//btnReporte1.setWidth(9.5f,Unit.EM);
    	txtIdRend.setWidth(9f, Unit.EM);
    	txtfecha.setWidth(9f, Unit.EM);
    	txtFechaGasto.setWidth(9f, Unit.EM);
    	txtImporte.setWidth(6f, Unit.EM);
    	txtConcepto.setWidth(14f, Unit.EM);
    	
		cmbArea.setWidth("100.0%");	
		cmbPrograma.setWidth("100.0%");
		cmbComisionados.setWidth("100.0%");
		txtfechaSalida.setWidth(12f, Unit.EM);
		txtfechaRegreso.setWidth(12f, Unit.EM);
		txtDuracion.setWidth(6f, Unit.EM);
		pnlTblDestinos.setWidth("100%");
		pnlTblDestinos.setHeight(3f, Unit.CM);
		pnlTblDetalleGastos.setWidth("100%");
		pnlTblDetalleGastos.setHeight(2.7f, Unit.CM);
		
		btnModificaFecha.setWidth(6f, Unit.EM);
		btnModificaFecha.setHeight(3.5f, Unit.EM);
		txtAnticipo.setWidth(8f, Unit.EM);
		txtViatico.setWidth(8f, Unit.EM);
		txtGasto.setWidth(8f, Unit.EM);
		txtTotGasto.setWidth(8f, Unit.EM);
		
		txtSaldoFavor.setWidth(25.5f, Unit.EM);
		txtMontoSaldo.setWidth(8f, Unit.EM);
		cmbBanco.setWidth(12f, Unit.EM);
		txtNCuenta.setWidth(12f, Unit.EM);
		txtNDeposito.setWidth(9f, Unit.EM);

	
	}

	
	private void cargarGrillas(){
		
		
		Form_gridLayout0.addComponent(hl_botonesGral,0,0,5,0);

	    
	   
	    vl_1.removeAllComponents();
	    vl_1.addComponents(lblDestino,pnlTblDestinos);
	    
	    
	    hl_importes.addComponents(txtAnticipo,txtViatico,txtGasto,txtTotGasto);
	    hl_saldos.addComponents(txtSaldoFavor,txtMontoSaldo);
	    hl_gastos.addComponents(txtFechaGasto,txtConcepto,txtImporte,btnAgregaGasto);
	    hl_gastos.setComponentAlignment(btnAgregaGasto, Alignment.BOTTOM_LEFT);
	    hl_banco.addComponents(cmbBanco,txtNCuenta,txtNDeposito);
	    vl_gastos.removeAllComponents();
	    vl_gastos.addComponents(lblDetGastos,hl_gastos,pnlTblDetalleGastos);
	    
	    Form_gridLayout1.addComponent(txtIdComision,0,0,0,0);
		Form_gridLayout1.addComponent(txtIdRend,1,0,1,0);
		Form_gridLayout1.addComponent(txtNExpediente,2,0,4,0);
    	Form_gridLayout1.addComponent(txtfecha,7,0,7,0);
    	
    	Form_gridLayout1.addComponent(cmbArea,0,1,0,1);
    	Form_gridLayout1.addComponent(cmbPrograma,1,1,3,1);
      	Form_gridLayout1.addComponent(cmbComisionados,4,1,7,1);
      	
    	Form_gridLayout1.addComponent(txtfechaSalida,0,2,0,2);
    	Form_gridLayout1.addComponent(txtfechaRegreso,0,3,0,3);
    	Form_gridLayout1.addComponent(btnModificaFecha,1,2,1,2);
    	Form_gridLayout1.addComponent(txtDuracion,1,3,1,3);
    	Form_gridLayout1.addComponent(vl_1,2,2,7,3);
    	
    	Form_gridLayout1.setComponentAlignment(btnModificaFecha, Alignment.MIDDLE_LEFT);
    	
    	Form_gridLayout2.addComponent(hl_importes,0,0,0,0);
    	Form_gridLayout2.addComponent(vl_gastos,1,0,7,2);
    	
    	Form_gridLayout2.addComponent(hl_saldos,0,1,0,1);
  	
    	Form_gridLayout2.addComponent(hl_banco,0,2,0,2);

    	
    	
    	   	
	}
	
	
	private boolean validarCamposGastos(){
		try{
			cmbComisionados.setValidationVisible(true);
			txtFechaGasto.setValidationVisible(true);
			txtConcepto.setValidationVisible(true);
			txtImporte.setValidationVisible(true);

			cmbComisionados.validate();
			txtFechaGasto.validate();
			txtConcepto.validate();
			txtImporte.validate();

			return true;
			
		}catch(Exception e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
		}
		/*
		catch(NumberFormatException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}catch(Validator.InvalidValueException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}*/
		
	}
	
	
	private boolean validaTxtAnticipo(){
		try{
			txtAnticipo.setValidationVisible(true);
			txtAnticipo.validate();
			return true;
		}catch(Exception e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
		}
	}
	
	
	private boolean validarCamposRendicion(){
		try{
			txtIdComision.setValidationVisible(true);
			txtfecha.setValidationVisible(true);
			txtfechaSalida.setValidationVisible(true);
			txtfechaRegreso.setValidationVisible(true);
			txtDuracion.setValidationVisible(true);
			cmbComisionados.setValidationVisible(true);
			txtAnticipo.setValidationVisible(true);
			txtViatico.setValidationVisible(true);
			txtGasto.setValidationVisible(true);
			txtTotGasto.setValidationVisible(true);
			txtMontoSaldo.setValidationVisible(true);
			
			
			txtIdComision.validate();
			txtfecha.validate();
			txtfechaSalida.validate();
			txtfechaRegreso.validate();
			txtDuracion.validate();
			cmbComisionados.validate();
			txtAnticipo.validate();
			txtViatico.validate();
			txtGasto.validate();
			txtTotGasto.validate();
			txtMontoSaldo.validate();
			

			return true;
			
		}catch(Exception e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
		}
		/*
		catch(NumberFormatException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}catch(Validator.InvalidValueException e){
		//	Notification.show(" "+ e.getMessage(),Type.ERROR_MESSAGE );
			return false;
			
		}*/
		
	}
	
///////////////////////////////////////////////	
///////////////////////////////////////////////	
	//Ventana VentanaComisionadosABM
	class VentanaModificaFechas extends Window {
	
		public VentanaModificaFechas(int idEmp,int idProg,Date fechaSalida,Date fechaRegreso,Consumer<Comisiones> save) {
			super("Modificación Fechas");
			center();
			
			setModal(true);
			this.setWidth(25, Unit.PERCENTAGE);
			this.setHeight(25, Unit.PERCENTAGE);
			setResizable(false);
			setClosable(false);
			
			Panel Form_contenedorPanel = new Panel();
			Form_contenedorPanel.setImmediate(false);
			Form_contenedorPanel.setWidth("100.0%");
			Form_contenedorPanel.setHeight("100.0%");
			
			VerticalLayout content = new VerticalLayout();
			content.setMargin(true);
			content.setSpacing(true);

			
			DateField txtFecSalida = new DateField("Fecha/Hora Salida");
			DateField txtFecRegreso = new DateField("Fecha/Hora Regreso");
//			TextField txtDuracion = new TextField("Duración");
//			TextField txtViatico = new TextField("$ Viaticos");

			NativeButton btnActualizar = new NativeButton("Actualizar");
			NativeButton btnSalir = new NativeButton("Salir");
			
			txtFecSalida.setWidth(12f, Unit.EM);
			txtFecRegreso.setWidth(12f, Unit.EM);
			
			txtFecSalida.setDateFormat("dd/MM/yyyy HH:mm");
			txtFecSalida.setResolution(Resolution.MINUTE);
			txtFecSalida.setLenient(true);
		    
			txtFecRegreso.setDateFormat("dd/MM/yyyy HH:mm");
			txtFecRegreso.setResolution(Resolution.MINUTE);
			txtFecRegreso.setLenient(true);
			
		    
			HorizontalLayout hl_0=new HorizontalLayout();
			hl_0.setSpacing(true);
			hl_0.addComponents(txtFecSalida,txtFecRegreso);
			
			HorizontalLayout hl_1=new HorizontalLayout();
			hl_1.setSpacing(true);
			hl_1.addComponents(btnActualizar,btnSalir);
			
			
			txtFecSalida.setValue(fechaSalida);
			txtFecRegreso.setValue(fechaRegreso);

			
			
			
			btnActualizar.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {	
					if (txtFecSalida.getValue().before(txtFecRegreso.getValue())){
						Comisiones com=new Comisiones();
						//EmpleadosPorPrograma e = new EmpleadosPorPrograma();
						DetalleComisionados dc = new DetalleComisionados();
						
						EmpleadosPorProgramaDAO emp = new EmpleadosPorProgramaDAO();
						CategoriasDAO cat = new CategoriasDAO();
						
						float duracion=com.calculoDuracionComision(txtFecSalida.getValue(), txtFecRegreso.getValue());
			
						float viatico=0;
						if (idProg!=0 && idEmp!=0) {
							int idCat = emp.getEmpleadoDeProgramaContainer(emp.getIdEmpleadoPorPrograma(idProg, idEmp)).getIdCategoria();
							
							float monto = cat.DevuelveCategoria(idCat).getMontoProvincial();
							viatico = dc.calculoViaticos(monto, duracion);

						}

		
						com.setFecSalida(txtFecSalida.getValue());
						com.setFecRegreso(txtFecRegreso.getValue());
						com.setDuracion(duracion);
						com.setViatico(viatico);
						com.setFlag(1);
						save.accept(com);
						
						close();
					} else {
						Notification.show("La Fecha/Hora de regreso debe ser posterior a la de salida.",Notification.Type.ERROR_MESSAGE);
					}
				}
			});
			
			
			btnSalir.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {			
					Comisiones com=new Comisiones();
					com.setFlag(0);
					save.accept(com);
					close();
				}
			});
			

			content.addComponents(hl_0,hl_1);
			Form_contenedorPanel.setContent(content);
			
			VerticalLayout Form_mainLayout = new VerticalLayout();
			Form_mainLayout.setImmediate(false);
			Form_mainLayout.setWidth("100%");
			Form_mainLayout.setHeight("100%");
			Form_mainLayout.setSizeFull();
			Form_mainLayout.setMargin(true);
			Form_mainLayout.setSpacing(true);
			Form_mainLayout.addComponent(Form_contenedorPanel);

			
			setContent(Form_mainLayout);
		
		}
		
	
	}


///////////////////////////////////////////////	
///////////////////////////////////////////////	



	
	@AutoGenerated
	private void buildMainLayout() {
		Form_mainLayout = new VerticalLayout();
		Form_mainLayout.setImmediate(false);
		Form_mainLayout.setWidth("100%");
		Form_mainLayout.setHeight("100%");
		Form_mainLayout.setSizeFull();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		//  verticalSplitPanel_1
	    contenedorPanel = buildContenedorPanel();
	    Form_mainLayout.addComponent(contenedorPanel);
 
		//return Form_mainLayout;

	}
	
	private Panel buildContenedorPanel() {
		
		// common part: create layout
		Panel Form_contenedorPanel = new Panel();
		Form_contenedorPanel.setImmediate(false);
		Form_contenedorPanel.setWidth("100.0%");
		Form_contenedorPanel.setHeight("100.0%");
//		Form_contenedorPanel.setSizeFull();
		
		Panel Form_panel0 = new Panel();
		Panel Form_panel1 = new Panel();
		Panel Form_panel2 = new Panel();
		
		Form_gridLayout0 = new GridLayout(6,1);
    	Form_gridLayout0.setWidth("100.0%");
    	Form_gridLayout0.setColumnExpandRatio(0, 0);
    	Form_gridLayout0.setColumnExpandRatio(1, 0);
    	Form_gridLayout0.setColumnExpandRatio(2, 0);
    	Form_gridLayout0.setColumnExpandRatio(3, 0);
    	Form_gridLayout0.setColumnExpandRatio(4, 0);
    	Form_gridLayout0.setColumnExpandRatio(5, 1f);
    	Form_gridLayout0.setSpacing(true);
    	
    	
		Form_gridLayout1 = new GridLayout(8,5);
    	Form_gridLayout1.setWidth("100.0%");
    	Form_gridLayout1.setColumnExpandRatio(0, 1f);
    	Form_gridLayout1.setColumnExpandRatio(1, 1f);
    	Form_gridLayout1.setColumnExpandRatio(2, 1f);
    	Form_gridLayout1.setColumnExpandRatio(3, 1f);
    	Form_gridLayout1.setColumnExpandRatio(4, 1f);
    	Form_gridLayout1.setColumnExpandRatio(5, 1f);
    	Form_gridLayout1.setColumnExpandRatio(6, 1f);
    	Form_gridLayout1.setSpacing(true);

    	Form_gridLayout2 = new GridLayout(8,4);
    	Form_gridLayout2.setWidth("100.0%");
    	Form_gridLayout2.setColumnExpandRatio(0, 1f);
    	Form_gridLayout2.setColumnExpandRatio(1, 1f);
    	Form_gridLayout2.setColumnExpandRatio(2, 1f);
    	Form_gridLayout2.setColumnExpandRatio(3, 1f);
    	Form_gridLayout2.setColumnExpandRatio(4, 1f);
    	Form_gridLayout2.setColumnExpandRatio(5, 1f);
    	Form_gridLayout2.setColumnExpandRatio(6, 1f);
    	Form_gridLayout2.setSpacing(true);
    	
    	Form_panel0.setContent(Form_gridLayout0);
    	Form_panel1.setContent(Form_gridLayout1);
    	Form_panel2.setContent(Form_gridLayout2);

		// verticalLayout_1
    	VerticalLayout Form_verticalLayout_1 = new VerticalLayout();
		Form_verticalLayout_1.setImmediate(false);
		Form_verticalLayout_1.setWidth("100.0%");
		Form_verticalLayout_1.setHeight("100.0%");
		Form_verticalLayout_1.setMargin(true);
		Form_verticalLayout_1.addComponents(Form_panel0,Form_panel1,Form_panel2);
		Form_verticalLayout_1.setSpacing(true);
		
		Form_contenedorPanel.setContent(Form_verticalLayout_1);
		
		return Form_contenedorPanel;
		
	// grilla >> panel >> verticalLayout >> panel	
	}



}

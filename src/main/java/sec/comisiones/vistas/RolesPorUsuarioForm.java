package sec.comisiones.vistas;

import java.sql.SQLException;

import sec.comisiones.dao.RolesDAO;
import sec.comisiones.dao.RolesPorUsuariosDAO;
import sec.comisiones.dao.UsuariosDAO;
import sec.comisiones.manager.RolesManager;
import sec.comisiones.mapeos.Usuarios;

import com.agpro.controles.UtilUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification.Type;



@SuppressWarnings("serial")
public class RolesPorUsuarioForm extends CustomComponent {

	private VerticalLayout mainLayout;
	private Panel contenedorPanel;
	private VerticalLayout verticalLayout_1;
	final RolesManager tblUser = new RolesManager();
	private Table tb;
	private NativeButton btnNew = new NativeButton();
	private Usuarios usrLog = new Usuarios();
	private RolesDAO RolesDao = new RolesDAO();
	private String idUsr;
	

	public RolesPorUsuarioForm(Usuarios usr, String idUsr) {
		this.usrLog = usr;
		this.idUsr = idUsr;
		ini();
	}

	
///////////////////////////////////////////////	
///////////////////////////////////////////////
	private void ini(){
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setHeight(30f,Unit.EM);
		setCompositionRoot(verticalLayout_1);
		
		btnNew = UtilUI.buildBtnNew("Nuevo");
		
		tb = tblUser.cargaTablaRolesUsuario(idUsr);
		verticalLayout_1.removeAllComponents();
		verticalLayout_1.addComponent(btnNew);
		verticalLayout_1.addComponent(tb);
		verticalLayout_1.setExpandRatio(tb, 1.0f);

		
		final MyForm myform = new MyForm(usrLog);
		myform.setVisible(true);
		verticalLayout_1.addComponent(myform);
		

		tb.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
			//    	Notification.show("item selected: "+  tb.getValue(), Notification.Type.HUMANIZED_MESSAGE ); 
		            myform.setItemDataSource(tb.getItem(selectedItemId));
		            if (! myform.isVisible()) {
		                tb.setCurrentPageFirstItemId(selectedItemId);
		                myform.setVisible(true);}
			    		} else {
			    			ini();
			    		}
			    }
		});
		
		
		btnNew.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				
				UsuariosDAO us = new UsuariosDAO();
				RolesPorUsuariosDAO u=new RolesPorUsuariosDAO();
				
				Usuarios itemUsr;
				try {
						itemUsr = us.getUsuario(idUsr);
						Item item = u.getItemRolesDeUsuario(itemUsr);
			            myform.setItemDataSource(item);
				        myform.setVisible(true);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						}

				}
		});
		
		
	}
	

///////////////////////////////////////////////	
///////////////////////////////////////////////	
	// Show item details here
	class MyForm extends FormLayout {

		TextField id = new TextField("id");
	    TextField idUsuario = new TextField("idUsuario");
	    TextField nombreUsuario = new TextField("nombreUsuario");
	    ComboBox idRol = new ComboBox("Rol");

   
		NativeButton btnGraba = new NativeButton("Actualiza");
	    NativeButton btnElimina = new NativeButton("Elimina");
	    NativeButton btnCancela = new NativeButton("Cancela");
	    HorizontalLayout hl_1= new HorizontalLayout(btnGraba,btnElimina,btnCancela);
	    Usuarios usrLog = new Usuarios();
	    
	    public MyForm(){

	    }
	    
	    public MyForm(Usuarios us){
	    	usrLog=us;
	    }
	    
	    public void setItemDataSource(Item item) {
	    	
	    	idRol.setContainerDataSource(RolesDao.getAllRolesContainer());
	    	
	        addComponents(nombreUsuario,idRol, hl_1);
	//        FieldGroup binder = new FieldGroup(item);
	//        binder.bindMemberFields(this);
	        
	        // Bind the form
	        final ErrorfulFieldGroup binder = new ErrorfulFieldGroup(item);
	        binder.setBuffered(true);
	        binder.bindMemberFields(this);

	        // Have an error display
	        final ErrorLabel formError = new ErrorLabel();
	        formError.setWidth(null);
	      //addComponent(formError);
	        
	        binder.setErrorDisplay(formError);
            
	        
	        
	        btnGraba.addStyleName("Small");	        
	        btnGraba.setImmediate(true);
	    //	btnModifica.setDescription("Guarda Modificaciones");

	    	
		    	btnElimina.addStyleName("Small");
		    	
		    	id.setEnabled(false);
		    	idUsuario.setEnabled(false);
		    	
		    	nombreUsuario.addStyleName("Small");
		    	nombreUsuario.setRequired(true);
		    	nombreUsuario.setRequiredError("Campo Obligatorio");
		    	nombreUsuario.addValidator(new StringLengthValidator("Longitud MÃ¡xima 15 caracteres", 0, 15, true));
		    	nombreUsuario.setImmediate(true);
		    	nombreUsuario.setValidationVisible(true);
		    	nombreUsuario.setEnabled(false);
		
		    	
		    	idRol.addStyleName("Small");
		    	idRol.setRequired(true);
		    	idRol.setRequiredError("Campo Obligatorio");
		    	idRol.setItemCaptionPropertyId("nombre");
		    	idRol.setInvalidAllowed(true);
		    	idRol.setNullSelectionAllowed(true);
		    	idRol.setTextInputAllowed(false);
		    	
		    	
		    	
		    	btnGraba.setEnabled(false);
	    	
		    	if ((Integer) item.getItemProperty("id").getValue() == 0){
		    		btnGraba.setCaption("Graba Nuevo");
		    		btnGraba.setEnabled(true);
					btnElimina.setEnabled(false);
					idRol.setEnabled(true);
					tb.setSelectable(false);
		    	}else{
		    		idRol.setEnabled(false);
		    	}
		    	
	    	
		//////////////////////////////////
		///////// BOTONES ////////////////
		//////////////////////////////////	   
	    	
		    	btnGraba.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
						try {
							binder.commit();
							
							RolesPorUsuariosDAO u = new RolesPorUsuariosDAO();
							
							if(btnGraba.getCaption()=="Graba Nuevo"){
								try {
									 if (u.existe(Integer.parseInt(idUsuario.getValue()), (int)idRol.getValue())==0){
										u.agrega(Integer.parseInt(idUsuario.getValue()), (int)idRol.getValue(),  usrLog.getId()); 
										btnGraba.setCaption("Actualiza");
										tb.setSelectable(true);
										ini();
										}else{
											Notification.show("El Rol: "+ idRol.getItemCaption(idRol.getValue()) +", ya se encuentra registrado para el Usuario: "+ nombreUsuario.getValue() +".", Type.ERROR_MESSAGE);
											idRol.setValue("");
										}	
									} catch (SQLException e) {
										e.printStackTrace();
									}
								} else if (btnGraba.getCaption()=="Actualiza"){
								//	u.modifica(Integer.parseInt(idUsuario.getValue()), Integer.parseInt(idRol.getValue()), usrLog.getId()); 		
									ini();
								}
						} catch (CommitException e) {
							e.printStackTrace();
						}
				}
			});
	        
        
	        btnElimina.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
					RolesPorUsuariosDAO u = new RolesPorUsuariosDAO();
						u.elimina(Integer.parseInt(idUsuario.getValue()), (int)idRol.getValue(), usrLog.getId()); 		
						ini();					
					}
				});
	        
	        
	        btnCancela.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
						ini();
					}
			});

	    }
	};

	
///////////////////////////////////////////////	
///////////////////////////////////////////////	
	
	
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setSizeFull();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		//  verticalSplitPanel_1
	    contenedorPanel = buildContenedorPanel();
		mainLayout.addComponent(contenedorPanel);
 
		return mainLayout;
	}

	private Panel buildContenedorPanel() {
		// common part: create layout
		contenedorPanel = new Panel();
		contenedorPanel.setImmediate(false);
		contenedorPanel.setWidth("100.0%");
		contenedorPanel.setHeight("100.0%");
		contenedorPanel.setSizeFull();
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(true);
		contenedorPanel.setContent(verticalLayout_1);
		
		return contenedorPanel;
	}
	

}


package sec.comisiones.vistas;

import java.sql.SQLException;
import java.util.function.Consumer;

import org.vaadin.dialogs.ConfirmDialog;

import sec.comisiones.dao.AreasDAO;
import sec.comisiones.dao.EmpleadosDAO;
import sec.comisiones.dao.ProgramasDAO;
import sec.comisiones.manager.ProgramasManager;
import sec.comisiones.mapeos.Usuarios;
import sec.comisiones.vistas.UsuariosForm.MySubRol;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Sizeable.Unit;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification.Type;

@SuppressWarnings("serial")
public class ProgramasForm extends CustomComponent {

	private VerticalLayout mainLayout;
	private Panel contenedorPanel;
	private VerticalLayout verticalLayout_1;
	final ProgramasManager tblUser = new ProgramasManager();
	private Table tb;
	NativeButton btnNew=new NativeButton();
	Usuarios usrLog = new Usuarios();
	private AreasDAO AreasDao = new AreasDAO();
	private EmpleadosDAO empleadosDao = new EmpleadosDAO();
	
	public ProgramasForm() {
		ini();
	}
	
	public ProgramasForm(Usuarios usr) {
		usrLog= usr;
		ini();
	}

	
///////////////////////////////////////////////	
///////////////////////////////////////////////
	private void ini(){
		buildMainLayout();
		setCompositionRoot(mainLayout);	
	
		
		btnNew.setCaptionAsHtml(true);
		btnNew.setCaption(FontAwesome.PLUS.getHtml() + " Nuevo" );
		
		tb = tblUser.cargaTabla();
		verticalLayout_1.removeAllComponents();
		verticalLayout_1.addComponent(btnNew);
		verticalLayout_1.addComponent(tb);
		verticalLayout_1.setExpandRatio(tb, 1.0f);

		tb.setSelectable(true);
    	btnNew.setEnabled(true);
		
		final MyForm myform = new MyForm(usrLog);
		myform.setVisible(true);
		verticalLayout_1.addComponent(myform);
		
		// Handle selection change.
		tb.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
		    	Object selectedItemId = event.getProperty().getValue();
			    if (selectedItemId != null) {
			//    	Notification.show("item selected: "+  tb.getValue(), Notification.Type.HUMANIZED_MESSAGE ); 
		            myform.setItemDataSource(tb.getItem(selectedItemId));
		            if (! myform.isVisible()) {
		                tb.setCurrentPageFirstItemId(selectedItemId);
		                myform.setVisible(true);}
			    	} else {
				   //    	Notification.show("Nothing selected ", Notification.Type.HUMANIZED_MESSAGE );
					//    	myform.setVisible(false);
					    	ini();
					    }
			    }
		});
		
		
		btnNew.addClickListener(new ClickListener(){
			public void buttonClick(ClickEvent event) {
				
				ProgramasDAO ud=new ProgramasDAO();
				Item item = ud.getItem();
							
	//		    Notification.show("item selected: "+ item.getItemPropertyIds(), Notification.Type.HUMANIZED_MESSAGE ); 
			    	
	            myform.setItemDataSource(item);
     //			if (! myform.isVisible()) {
		                myform.setVisible(true);
	//           }
				}
		});
		
		
	}
	

///////////////////////////////////////////////	
///////////////////////////////////////////////	
	// Show item details here
	class MyForm extends FormLayout {

		TextField id = new TextField("id");
	    TextField nombre = new TextField("Código");
	    TextField descripcion = new TextField("Descripción");
	    ComboBox idArea = new ComboBox("Area");
	    ComboBox idEmpleado = new ComboBox("Responsable");
	    
	    NativeButton btnRoles = new NativeButton("Empleados");
	    
		NativeButton btnGraba = new NativeButton("Actualiza");
	    NativeButton btnElimina = new NativeButton("Elimina");
	    NativeButton btnCancela = new NativeButton("Cancela");
	    
	    HorizontalLayout hl_01= new HorizontalLayout(id,nombre,descripcion,idArea,idEmpleado);
	    HorizontalLayout hl_02= new HorizontalLayout(btnRoles);
	    HorizontalLayout hl_1= new HorizontalLayout(btnGraba,btnElimina,btnCancela);
	    Usuarios usrLog = new Usuarios();
	    
	    public MyForm(){

	    }
	    
	    public MyForm(Usuarios us){
	    	usrLog=us;
	    }
	    
	    public void setItemDataSource(Item item) {
	    	idArea.setContainerDataSource(AreasDao.getAllAreasContainer());
	    	idEmpleado.setContainerDataSource(empleadosDao.getAllEmpleadosContainer());
	        addComponents(hl_01,hl_02,hl_1);
	        hl_01.setSpacing(true);
	//        FieldGroup binder = new FieldGroup(item);
	//        binder.bindMemberFields(this);
	        
	        // Bind the form
	        final ErrorfulFieldGroup binder = new ErrorfulFieldGroup(item);
	        binder.setBuffered(true);
	        binder.bindMemberFields(this);

	        // Have an error display
	        final ErrorLabel formError = new ErrorLabel();
	        formError.setWidth(null);
	      //addComponent(formError);
	        
	        binder.setErrorDisplay(formError);
            
	        
	        
	        btnGraba.addStyleName("Small");	        
	        btnGraba.setImmediate(true);
	    //	btnModifica.setDescription("Guarda Modificaciones");

	    	
	    	btnElimina.addStyleName("Small");
	    	

	    	nombre.addStyleName("Small");
	    	nombre.setRequired(true);
	    	nombre.setRequiredError("Campo Obligatorio");
	    	nombre.addValidator(new StringLengthValidator("Longitud Máxima 15 caracteres", 0, 15, true));
	    	nombre.setImmediate(true);
	    	nombre.setValidationVisible(true);
	    	nombre.setEnabled(false);
	    	nombre.setReadOnly(true);	
	    	
	    	descripcion.addStyleName("Small");
	    	descripcion.setRequired(true);
	    	descripcion.setRequiredError("Campo Obligatorio");
	    	descripcion.addValidator(new StringLengthValidator("Longitud Máxima 20 caracteres", 0, 200, true));     
	    	descripcion.setImmediate(true);
	    	descripcion.setValidationVisible(true);
   	
	    	
	    	idArea.addStyleName("Small");
	    	idArea.setRequired(true);
	    	idArea.setRequiredError("Campo Obligatorio");
	    	idArea.setItemCaptionPropertyId("nombre");
	    	idArea.setImmediate(true);
	    	idArea.setInvalidAllowed(true);
	    	idArea.setNullSelectionAllowed(true);
	    	idArea.setTextInputAllowed(false);
	    	
	    	
	    	idEmpleado.addStyleName("Small");
	    	idEmpleado.setRequired(true);
	    	idEmpleado.setRequiredError("Campo Obligatorio");
	    	idEmpleado.setItemCaptionPropertyId("descEmpleado");
	    	idEmpleado.setImmediate(true);
	    	idEmpleado.setInvalidAllowed(true);
	    	idEmpleado.setNullSelectionAllowed(true);
	    	idEmpleado.setTextInputAllowed(false);
	    	
	    	id.setEnabled(false);
	    	id.setWidth(6, Unit.EM);
	    	idEmpleado.setWidth(25, Unit.EM);
	    	descripcion.setWidth(25, Unit.EM);
	    	
	    	tb.setSelectable(false);
	    	btnNew.setEnabled(false);
	    	
	    	if ((Integer) item.getItemProperty("id").getValue() == 0){
	    		btnGraba.setCaption("Graba Nuevo");
				btnElimina.setEnabled(false);
		    	nombre.setEnabled(true);
		    	nombre.setReadOnly(false);
		    	idEmpleado.setEnabled(true);
		    	idEmpleado.setReadOnly(false);
		    	
		    	nombre.setValue("");
		    	descripcion.setValue("");
		    	idArea.setValue(null);
		    	idEmpleado.setValue(null);
				
	    /*	}else {
	    		int valor=0;
	    		if (!idEmp.getValue().equals(null)){
	    			valor=(int)idEmp.getValue();
	    		}
	    		idEmp.setContainerDataSource(empleadosDao.getAllEmpleadosContainer());
	    		idEmp.setValue(valor);
	    */	}
	    	
	    	
		//////////////////////////////////
		///////// BOTONES ////////////////
		//////////////////////////////////	   
	    	
	    	btnGraba.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
						try {
							binder.commit();
							
							ProgramasDAO u = new ProgramasDAO();
							
							if(btnGraba.getCaption()=="Graba Nuevo"){
								try {
									 if (u.existe(nombre.getValue())==0){
										 	u.agrega(nombre.getValue(), descripcion.getValue(), (int)idArea.getValue(), (int)idEmpleado.getValue(),usrLog.getId()); 
											btnGraba.setCaption("Actualiza");
											tb.setSelectable(true);
											ini();
									}else{
											Notification.show("El Código "+ nombre.getValue() +" ya existe registrado", Type.ERROR_MESSAGE);
											nombre.setValue("");
									}
								} catch (SQLException e) {
									e.printStackTrace();
								}
							} else if (btnGraba.getCaption()=="Actualiza"){
								u.modifica(nombre.getValue(), descripcion.getValue(), (int)idArea.getValue(), (int)idEmpleado.getValue(), usrLog.getId()); 		
								ini();
							}
						} catch (CommitException e) {
							e.printStackTrace();
						}


				}
			});
	        
        
	        btnElimina.addClickListener(new ClickListener(){
	        	public void buttonClick(ClickEvent event) {
	        		ProgramasDAO u = new ProgramasDAO();
					if (u.existenRegistrosRelacionados(nombre.getValue())==0) {
						ConfirmDialog.show(getUI(), "Confirmar", "¿Desea eliminar el registro seleccionado?","Sí", "No", new ConfirmDialog.Listener() {
							public void onClose(ConfirmDialog dialog) {
						          if (dialog.isConfirmed()) {
						               // C�digo S�
						        	  u.elimina(nombre.getValue(), usrLog.getId()); 		
										ini();	
						          } else {
						               // C�digo No     
						          }
						     }
						});

					} else {
						Notification.show("No se puede eliminar el registro seleccionado"," Existen registros asociados.",Type.ERROR_MESSAGE);
						ini();
					}
				}
	        });
	        	
	        	
	        	
						
						
					

	        
	        
	        btnCancela.addClickListener(new ClickListener(){
				public void buttonClick(ClickEvent event) {
						ini();
					}
			});
	        
	        
	        btnRoles.addClickListener((click) -> { 
	        	if(id.getValue().equals(null) || id.getValue().equals("0")){
					Notification.show("Debe grabar primero el programa y luego asociar los empleados.",Type.ERROR_MESSAGE);
				}else{
					UI.getCurrent().addWindow(new MySubEmp(Integer.parseInt(id.getValue()), nombre.getValue(), (newValue) -> {}));   
				}		
	        });
	        

	    }
	};

	
	
///////////////////////////////////////////////	
///////////////////////////////////////////////
// Show Roles de Usuario
	class MySubEmp extends Window {
		public MySubEmp(int idProg, String nomProg, Consumer<String> save) {
			super("Empleados del programa " + nomProg); // Set window caption
			center();
			//        String tipoEmpleado = "emp";
			setModal(true);
			//        setClosable(false);
			setResizable(false);
			this.setWidth(65, Unit.PERCENTAGE);
			this.setHeight(85, Unit.PERCENTAGE);
			VerticalLayout content = new VerticalLayout();
			content.setMargin(true);
			content.setSpacing(true);
			
			TextField valueEditor = new TextField("Value to edit", String.valueOf(nomProg));
			
			// Trivial logic for saving the edited data
			@SuppressWarnings("unused")
			Button saveButton = new Button("Save", (click) -> {
			// Close the sub-window
			close();
			save.accept(valueEditor.getValue());
			});
			
			
			EmpleadosPorProgramaForm vusuarios7 = new EmpleadosPorProgramaForm(usrLog, idProg);
			//verticalLayout_Form.addComponent(vusuarios6);
			content.addComponents(vusuarios7);
			
			//content.addComponents(valueEditor, saveButton);
			
			setContent(content);
		}
	}

///////////////////////////////////////////////	
///////////////////////////////////////////////
	
	

	
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setSizeFull();
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		//  verticalSplitPanel_1
	    contenedorPanel = buildContenedorPanel();
		mainLayout.addComponent(contenedorPanel);
 
		return mainLayout;
	}

	private Panel buildContenedorPanel() {
		// common part: create layout
		contenedorPanel = new Panel();
		contenedorPanel.setImmediate(false);
		contenedorPanel.setWidth("100.0%");
		contenedorPanel.setHeight("100.0%");
		contenedorPanel.setSizeFull();
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("98.0%");
		verticalLayout_1.setMargin(true);
		contenedorPanel.setContent(verticalLayout_1);
		
		return contenedorPanel;
	}
	

}
